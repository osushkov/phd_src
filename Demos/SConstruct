import sys
import os

### Stuff you might want to change ###

LIBRARY_SOURCES = [
    'src/CameraController.cpp',
    'src/Settings.cpp',
    'src/Control.cpp',
    'src/MainController.cpp',
    'src/Console.cpp',

    'src/Camera/Camera.cpp',
    'src/Camera/RemoteCamera.cpp',
    'src/Camera/PlaybackCamera.cpp',
    'src/Camera/Recorder.cpp',

    'src/Arm/Arm.cpp',
    'src/Arm/RemoteArm.cpp',
    'src/Arm/ArmForwardKinematics.cpp',
    'src/Arm/ArmInverseKinematics.cpp',
    'src/Arm/IKFitnessFunctionNearest.cpp',
    'src/Arm/IKFitnessFunctionObjectPickup.cpp',

    'src/Util/Common.cpp',
    'src/Util/Geometry.cpp',
    'src/Util/Timer.cpp',
    'src/Util/Semaphore.cpp',
    'src/Util/ReadWriteLock.cpp',
    'src/Util/ParallelServer.cpp',
    'src/Util/ConvexHull.cpp',
    'src/Util/PerfStats.cpp',

    'src/OptimiserClass/NelderMead.cpp',
    'src/OptimiserClass/RRNelderMead.cpp',
    'src/OptimiserClass/ParticleSwarm.cpp',
    'src/OptimiserClass/SimulatedAnnealing.cpp',
    'src/OptimiserClass/GeneticAlgorithm.cpp',
    'src/OptimiserClass/HillClimbing.cpp',

    'src/Demos/BallPickup.cpp',
]

BINARY_SOURCES = ['src/main.cpp']

DIST_SOURCES = LIBRARY_SOURCES + [
    'src/CameraController.h',
    'src/MainController.h',
    'src/Console.h',

    'src/Camera/Camera.h',
    'src/Camera/RemoteCamera.h',
    'src/Camera/PlaybackCamera.h',
    'src/Camera/Recorder.h',

    'src/Arm/Arm.h',
    'src/Arm/RemoteArm.h',
    'src/Arm/DummyArm.h',
    'src/Arm/ArmProtocol.h',
    'src/Arm/ArmForwardKinematics.h',
    'src/Arm/ArmInverseKinematics.h',
    'src/Arm/ArmJointLimits.h',
    'src/Arm/IKCommon.h',
    'src/Arm/IKFitnessFunctionNearest.h',
    'src/Arm/IKFitnessFunctionObjectPickup.h',

    'src/Settings.h',
    'src/Control.h',

    'src/Util/Common.h',
    'src/Util/Geometry.h',
    'src/Util/Timer.h',
    'src/Util/Semaphore.h',
    'src/Util/ReadWriteLock.h',
    'src/Util/ParallelServer.h',
    'src/Util/Vector3D.h',
    'src/Util/Vector2D.h',
    'src/Util/Matrix.h',
    'src/Util/Transform.h',
    'src/Util/ConvexHull.h',
    'sec/Util/PerfStats.h',
    
    'src/OptimiserClass/Common.h',
    'src/OptimiserClass/Optimiser.h',
    'src/OptimiserClass/NelderMead.h',
    'src/OptimiserClass/RRNelderMead.h'
    'src/OptimiserClass/ParticleSwarm.h',
    'src/OptimiserClass/SimulatedAnnealing.h',
    'src/OptimiserClass/GeneticAlgorithm.h',
    'src/OptimiserClass/HillClimbing.h',

    'src/Demos/BallPickup.h',
]

LIBS = ['cv', 'highgui', 'boost_thread-mt', 'pthread']

release_flags = '-Wall -D_REENTRANT -O3 -msse -msse2'
debug_flags = '-Wall -D_REENTRANT -g -p -DDEBUG'

### Stuff you probably don't need to change ###

env = Environment()

mode = ARGUMENTS.get('mode', 'debug')
if mode == 'debug':
    env.Append(CXXFLAGS = debug_flags)
elif mode == 'release':
    env.Append(CXXFLAGS = release_flags)
else:
    print "Unknown mode '%s%', use debug (default) or release" % mode
    sys.exit(1)

### compilation rules
library_objects = [ env.Object(s, CXX = 'g++') for s in LIBRARY_SOURCES]
binary_objects = [ env.Object(s, CXX = 'g++') for s in BINARY_SOURCES]

demos = env.Program('demos', library_objects + binary_objects,
                    CXX = 'g++', LIBS = LIBS)

