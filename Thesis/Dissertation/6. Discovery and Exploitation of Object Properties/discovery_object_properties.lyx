#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\master ../main.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Chapter
Discovery of Object Properties
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The previous chapters dealt with the task of a robot learning to recognise
 a new object and determining its 3D shape.
 However, to effectively manipulate and use an object, knowing the shape
 and appearance is not always sufficient.
 The robot needs an internal model of the object which, in addition to represent
ing the visual appearance and shape of the object, also represents other
 physical properties.
 Examples of physical properties include the coefficient of friction of
 the object's surface, the centre of mass and the weight of the object,
 whether the object is rigid or articulated, etc.
 Having an accurate model of such properties can allow the robot to effectively
 manipulate and use the object to accomplish a task.
\end_layout

\begin_layout Standard
To determine some physical properties, passive observation with a robot's
 sensors (such as a camera) may not be possible.
 Instead, we present a method in which the robot performs some experiments
 on an object and the outcome of these interactions provides information
 as to the underlying physical properties.
 
\end_layout

\begin_layout Standard
For example, take the task of finding the centre of mass of an object.
 The centre of mass depends on the internal composition of the object and
 cannot be determined by a robot using vision alone.
 Instead, the robot can take the object and drop it onto a flat surface
 from various starting orientations.
 The resulting orientation of the object, after each drop, provides the
 robot with information about the location of the centre of mass.
 However, these physical experiments are expensive, in terms of time and
 wear and tear.
 Ideally, the number of actions performed should be minimised, by performing
 the most informative experiments.
\end_layout

\begin_layout Standard
Our approach involves using a physics simulator to generate hypotheses about
 the object's properties and predictions of the outcome of an action on
 a simulated model of the object.
 We can then match the outcome of a real world action to the simulated outcomes
 to determine which hypothesis most accurately describes the real world
 object.
 The simulated outcomes can also be used to determine the most informative
 action that will minimise the total number of actions the robot must perform
 to reliably determine the object's physical properties.
 This is one of the key contributions of our work, as it allows a robot
 to learn the properties of an object more effectively than performing uninforme
d random actions.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-experiment-loop"

\end_inset

 shows a simple representation of the hypothesise-simulate-perform loop
 of our method.
 The final result is a simulated model that accurately describes the physical
 properties of the real object.
 This simulated model can then be used to predict the outcome of an action
 on the object or plan tool use tasks using the object.
\end_layout

\begin_layout Standard
The idea of internally generating hypotheses that are then checked for consisten
cy with real world experiments has previously been applied in biology to
 discover metabolic pathways in yeast 
\begin_inset CommandInset citation
LatexCommand cite
key "6_king2004"

\end_inset

.
 The use of internal simulation to make predictions of action consequences
 and hypotheses about the world has parallels with cognitive theory of the
 mind 
\begin_inset CommandInset citation
LatexCommand cite
key "6_conscious_thought"

\end_inset

.
\end_layout

\begin_layout Standard
We present a description of our general approach (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Active-Robot-Learning"

\end_inset

), followed by several experiments in which the robot learns the physical
 properties of an object by performing various actions (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Learning-System-Implementations"

\end_inset

).
 Next we demonstrate a tool use task in which the robot uses the learned
 physical properties to plan and achieve a set goal (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Learned-Model-Exploitation"

\end_inset

).
 The chapter concludes with a discussion of the results (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Discussion-1"

\end_inset

) and possible avenues for future work (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Future-Work-1"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/concept1.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Object property discovery experiment loop.
\end_layout

\end_inset

The experiment loop view of our system.
 The robot uses a physics simulator to make hypotheses about the outcome
 of actions on an object and uses this to determine the most informative
 action.
 This action is then carried out by the robot on the real world object,
 the result of which is then used to update the probability distribution
 over hypothesis models.
 This process is repeated several times to determine the most accurate model
 of the object.
\begin_inset CommandInset label
LatexCommand label
name "fig:The-experiment-loop"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Active Robot Learning Framework
\begin_inset CommandInset label
LatexCommand label
name "sec:Active-Robot-Learning"

\end_inset


\end_layout

\begin_layout Subsection
Problem Definition
\end_layout

\begin_layout Standard
The problem we solve is how can a robot best determine the underlying physical
 properties of an object by performing some actions and observing the outcomes.
 First we define the problem.
 Let there be an object that the robot can localise in a scene using the
 method from Chapter 5.
 The 3D shape of this object has also been determined using the previously
 presented method.
 The goal is to find a model, 
\begin_inset Formula $M$
\end_inset

, that accurately describes the physical properties of this object.
\end_layout

\begin_layout Standard
The problem definition requires the following:
\end_layout

\begin_layout Itemize
a pre-defined list of possible models 
\begin_inset Formula $H=\left\{ h_{1},h_{2},\ldots,h_{n}\right\} $
\end_inset

 that can describe the object;
\end_layout

\begin_layout Itemize
a discrete probability distribution 
\begin_inset Formula $C=\left\{ c_{1},c_{2},\ldots,c_{n}\right\} \mid c_{i}=P\left(M=h_{i}\right)$
\end_inset

 representing the confidence of a corresponding model matching the object;
\end_layout

\begin_layout Itemize
a set of actions 
\begin_inset Formula $A=\left\{ a_{1},a_{2},\ldots,a_{m}\right\} $
\end_inset

 that can be carried out by the robot;
\end_layout

\begin_layout Itemize
a set of possible action outcomes 
\begin_inset Formula $R=\left\{ r_{1},r_{2},\ldots,r_{l}\right\} $
\end_inset

, where the result of each action 
\begin_inset Formula $a\in A$
\end_inset

 is some 
\begin_inset Formula $r\in R$
\end_inset

.
\end_layout

\begin_layout Standard
The goal is to determine the model 
\begin_inset Formula $h\in H$
\end_inset

 that most accurately describes the object, such that 
\begin_inset Formula $M=h$
\end_inset

.
 To do this, the robot repeatedly performs actions 
\begin_inset Formula $a\in A$
\end_inset

 on the real object, observes the results 
\begin_inset Formula $r\in R$
\end_inset

, and updates the confidence distribution 
\begin_inset Formula $C$
\end_inset

.
 After several iterations, the model 
\begin_inset Formula $h_{x}$
\end_inset

 with the highest corresponding confidence 
\begin_inset Formula $c_{x}$
\end_inset

 is taken to be the model that best describes the object (
\begin_inset Formula $M=h_{x}$
\end_inset

).
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
To learn the object model, the robot must have a representation of each
 candidate model, determine the best actions to perform and update the probabili
ty distribution over the possible models, using the outcome result of an
 action.
 In this section, we describe our general object model learning method,
 which addresses these challenges.
 Further on in this chapter we present some concrete implementations, demonstrat
ing the effectiveness and suitability of our approach to a variety of problems.
\end_layout

\begin_layout Standard
The learning algorithm consists of several distinct steps:
\end_layout

\begin_layout Enumerate
building a probability model of all of the available actions and results
 (described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Experiment-Model"

\end_inset

).
\end_layout

\begin_layout Enumerate
generating a discrete set of possible result labels 
\begin_inset Formula $R$
\end_inset

 (described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Result-Labels"

\end_inset

).
\end_layout

\begin_layout Enumerate
the experimentation loop:
\end_layout

\begin_deeper
\begin_layout Enumerate
determine the most informative action, based on the current confidence distribut
ion and action probability models (described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Choosing-an-Experiment"

\end_inset

),
\end_layout

\begin_layout Enumerate
perform the best action, 
\end_layout

\begin_layout Enumerate
update the confidence distribution using the result.
\end_layout

\end_deeper
\begin_layout Enumerate
the model with the highest confidence is returned as the best model 
\begin_inset Formula $M$
\end_inset

.
\end_layout

\begin_layout Standard
These steps are outlined in a flowchart in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Flowchart-model"

\end_inset

 and in further detail in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Object-Model-Learning"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/overview.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Object property discovery system overview.
\end_layout

\end_inset

Flowchart of the object model learning system.
\begin_inset CommandInset label
LatexCommand label
name "fig:Flowchart-model"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\series bold
input:
\series default
 set of actions 
\begin_inset Formula $\rightarrow A$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
input:
\series default
 set of possible models 
\begin_inset Formula $\rightarrow H$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $C_{current}\leftarrow\left\{ \dfrac{1}{|H|}\right\} $
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $buildActionModels(A,H)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $R\leftarrow buildResultLabels(A,H)$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
repeat
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $a_{best}\leftarrow mostInformativeFrom(A,C_{current})$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $world\_state\leftarrow performAction(a_{best})$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $r\leftarrow classifyToResultLabel(world\_state,R)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $C_{new}\leftarrow updateModelConfidence(C_{current},r)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $C_{current}\leftarrow C_{new}$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
until
\series default
 
\emph on

\begin_inset Formula $max\_iterations$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $highest\_confidence\leftarrow0$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
forall
\series default
 
\begin_inset Formula $h_{i}$
\end_inset

 
\series bold
in
\series default
 
\begin_inset Formula $H$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
if
\series default
 
\begin_inset Formula $c_{i}>highest\_confidence$
\end_inset

 
\series bold
then
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $highest\_confidence\leftarrow c_{i}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $M\leftarrow h_{i}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
endif
\end_layout

\begin_layout Plain Layout

\series bold
endfor
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
output:
\series default
 most accurate object model 
\begin_inset Formula $\leftarrow M$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Object model learning algorithm.
\begin_inset CommandInset label
LatexCommand label
name "alg:Object-Model-Learning"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Object Model Representation
\end_layout

\begin_layout Standard
The object model refers to the robot's internal representation of an object.
 A particular model determines the different properties that can be represented,
 as well as being used to predict the outcomes of the robot actions.
 There are many different representations that can be used for the object
 model, depending on the particular application domain in which the model
 will be used, and the properties of the object that are required in the
 model.
 The nature of the object model representation will also affect how it can
 be used for planning and prediction.
\end_layout

\begin_layout Standard
The representation can be very low level.
 For example, a mapping between motor input commands and the resulting change
 in pixel values in the camera image due to the object being moved 
\begin_inset CommandInset citation
LatexCommand cite
key "6_generalisation_of_tool_affordances"

\end_inset

.
 An example of a higher level feature is the motion vector of an object
 when it is bumped by the robot manipulator from some direction 
\begin_inset CommandInset citation
LatexCommand cite
key "6_fitzpatrick"

\end_inset

.
 However, this type of low level explicit representation generalises poorly
 for different circumstances.
 For example, in the case of learning the movement vector after a bump from
 some direction, if the model is learned on a flat surface it would perform
 poorly if the object was located on a sloped surface.
 To overcome these limitations, our method uses a physics simulator to model
 an object.
\end_layout

\begin_layout Standard
There are several advantages to this approach.
 First, many laws of physics are encoded in the simulated environment.
 The robot does not need to learn from scratch concepts such as gravity
 or friction.
\end_layout

\begin_layout Standard
Second, a variety of object properties can be represented, depending on
 the sophistication of the physics simulator.
 This includes properties such as weight, centre of mass, coefficient of
 friction, hinges and axles, etc.
 
\end_layout

\begin_layout Standard
Third, the physics engine can be used to carry out simulated actions on
 an object model to build a posterior distribution over results for each
 action, to generate hypotheses about the object's underlying properties,
 and decide on which actions it should carry out in the real world to efficientl
y determine an accurate model for the object.
 We elaborate on this in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Experiment-Model"

\end_inset

.
\end_layout

\begin_layout Standard
Finally, a physics engine model can be used to predict the outcome of an
 action in many different scenarios, even if the environment differs from
 the one in which the object model was learned.
 For example, the robot may learn the centre of mass of a box by dropping
 it onto a flat surface and observing the results.
 This learned model can later be used for accurately predicting how the
 box will land if it is dropped onto a sloped surface.
\end_layout

\begin_layout Subsection
Action Probability Model
\begin_inset CommandInset label
LatexCommand label
name "sub:Experiment-Model"

\end_inset


\end_layout

\begin_layout Standard
The action probability model refers to the likelihood of observing a particular
 result when performing an action on an object with properties matching
 a specific model.
 
\end_layout

\begin_layout Standard
To determine the model that most accurately describes the object, the robot
 performs a series of actions.
 The type of motion and manipulation involved in each action will depend
 largely on the nature of the object, the physical properties of interest,
 and the methods of manipulation available to the robot.
 However, the overall structure of the action probability model and how
 it fits into the overall framework remains the same.
\end_layout

\begin_layout Standard
When the robot performs an action 
\begin_inset Formula $a\in A$
\end_inset

, the outcome is some world state that can be labelled 
\begin_inset Formula $r\in R$
\end_inset

, where 
\begin_inset Formula $R$
\end_inset

 is a discrete and finite set of possible results.
 How we generate a discrete result label for a continuous world state is
 described in the following section.
 Using this outcome, we can use Bayesian inference to update the probability
 distribution, 
\begin_inset Formula $C$
\end_inset

, over the possible models.
 Bayesian inference 
\begin_inset CommandInset citation
LatexCommand cite
key "6_bayesian_inference"

\end_inset

 is the application of Bayes rule to calculate the change in a belief distributi
on due to newly acquired evidence.
 This is expressed as:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula 
\begin{equation}
{\displaystyle P\left(B|E\right)=\dfrac{P\left(E|B\right)\cdot P\left(B\right)}{P\left(E\right)}}\label{eq:bayes_update_eq}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $P\left(B|E\right)$
\end_inset

 is the posterior probability (the confidence of belief 
\begin_inset Formula $B$
\end_inset

 being true given the new evidence 
\begin_inset Formula $E$
\end_inset

), 
\begin_inset Formula $P\left(B\right)$
\end_inset

 is the prior probability (the certainty of 
\begin_inset Formula $B$
\end_inset

 being true before the observation was made), 
\begin_inset Formula $P\left(E\right)$
\end_inset

 is the probability of observing evidence 
\begin_inset Formula $E$
\end_inset

 independent of 
\begin_inset Formula $B$
\end_inset

, and 
\begin_inset Formula $P\left(E|B\right)$
\end_inset

 is the probability of observing evidence 
\begin_inset Formula $E$
\end_inset

, if 
\begin_inset Formula $B$
\end_inset

 is known to be true.
 In the context of our system, after performing action 
\begin_inset Formula $a$
\end_inset

 and observing result 
\begin_inset Formula $r$
\end_inset

, using this formula, the robot can update the probability distribution
 
\begin_inset Formula $C$
\end_inset

 as follows:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula 
\begin{equation}
{\displaystyle \forall c_{i}\in C:c_{i}^{new}\leftarrow\dfrac{P\left(r|h_{i},a\right)\cdot c_{i}^{old}}{P\left(r|a\right)}}\label{eq:confidence_update_eq}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $P\left(r|h_{i},a\right)$
\end_inset

 is the probability of observing the result 
\begin_inset Formula $r$
\end_inset

 when performing action 
\begin_inset Formula $a$
\end_inset

 on an object whose model matches 
\begin_inset Formula $h_{i}$
\end_inset

, 
\begin_inset Formula $P\left(r|a\right)$
\end_inset

 is the probability of observing result 
\begin_inset Formula $r$
\end_inset

 independent of the object model when performing action 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $c_{i}^{old}$
\end_inset

 is the prior confidence level 
\begin_inset Formula $P\left(h_{i}\right)$
\end_inset

, and 
\begin_inset Formula $c_{i}^{new}$
\end_inset

 is the updated posterior confidence.
 This update follows from the fact that the probability distribution 
\begin_inset Formula $C$
\end_inset

 is our confidence that a model corresponds to the object.
 That is, 
\begin_inset Formula $c_{i}^{old}=P_{prior}\left(h_{i}\right)$
\end_inset

 and 
\begin_inset Formula $c_{i}^{new}=P_{posterior}(h_{i}|r,a)$
\end_inset

.
\end_layout

\begin_layout Standard
To perform this update, we must first determine the values of the terms
 
\begin_inset Formula $P\left(r|h_{i},a\right)$
\end_inset

 and 
\begin_inset Formula $P\left(r|a\right)$
\end_inset

 for an action 
\begin_inset Formula $a$
\end_inset

.
 We must calculate the probability 
\begin_inset Formula $P\left(r|h_{i},a\right)$
\end_inset

 of observing a result, 
\begin_inset Formula $r$
\end_inset

, when an action is performed on an object described by a particular model,
 and the probability 
\begin_inset Formula $P\left(r|a\right)$
\end_inset

 of a result when the action is performed independent of the object's model.
 
\end_layout

\begin_layout Standard
The naive method is to have the robot determine the result probabilities
 by performing every action 
\begin_inset Formula $a\in A$
\end_inset

 on every possible object with model 
\begin_inset Formula $h\in H$
\end_inset

 multiple times.
 However, this would be time consuming, depending on the size of 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

.
 Due to the noise and errors in manipulation and perception, each action
 must be performed several times to determine the underlying result probability
 distribution.
 Furthermore, this method requires the availability of a reference object
 for every model 
\begin_inset Formula $h\in H$
\end_inset

 for the robot to perform the actions on a known model.
 For these reasons, this approach is not feasible.
\end_layout

\begin_layout Standard
We take an alternate approach, using the physics engine to simulate the
 outcome of actions on all of the possible object models.
 These simulated results are used to build the probability model of each
 action.
 This requires that each of the actions 
\begin_inset Formula $a\in A$
\end_inset

 can be simulated with acceptable accuracy, such that the outcome of a simulated
 action is representative of the expected outcome when performed by the
 robot on the actual object.
 Additionally, the simulated action should account for the errors and noise
 present in the system when the robot carries out the action in the real
 world.
 We present some specific examples of action simulation in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Learning-System-Implementations"

\end_inset

.
\end_layout

\begin_layout Standard
Calculating the probability model for each action can be done as an initialisati
on step, prior to the robot interacting with the object.
 To do this, each action is performed on each possible object model in simulatio
n.
 This is done several times so that the noise of the action is taken into
 account by the probability distribution over results.
 When a simulated action outputs a particular result label, a corresponding
 counter is incremented for both the object model dependent probability
 
\begin_inset Formula $P\left(r|h_{i},a\right)$
\end_inset

 and independent probability 
\begin_inset Formula $P\left(r|a\right)$
\end_inset

.
 At the end, these counters are normalised according to the number of simulation
s performed and become the action's model probability distributions.
 The process is summarised in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Calculating-the-experiment"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\series bold
input:
\series default
 set of actions 
\begin_inset Formula $\rightarrow A$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
input:
\series default
 set of possible models 
\begin_inset Formula $\rightarrow H$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
input:
\series default
 set of possible action results 
\begin_inset Formula $\rightarrow R$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
forall
\series default
 
\emph on

\begin_inset Formula $a$
\end_inset


\emph default
 
\series bold
in
\series default
 
\begin_inset Formula $A$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $independent\_probabilities[a]\leftarrow\{0\}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
forall
\series default
 
\emph on

\begin_inset Formula $h$
\end_inset


\emph default
 
\series bold
in
\series default
 
\emph on

\begin_inset Formula $H$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $model\_probabilities[a][h]\leftarrow\{0\}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
repeat
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $world\_state\leftarrow performSimulatedAction(a,h)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $r\leftarrow classifyToResultLabel(world\_state,R)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $independent\_probabilities[a][r]\leftarrow independent\_probabilities[a][r]+1$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $model\_probabilities[a][h][r]\leftarrow model\_probabilities[a][h][r]+1$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold

\begin_inset space ~
\end_inset

until
\series default
 
\emph on

\begin_inset Formula $num\_iterations$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
forall
\series default
 
\emph on

\begin_inset Formula $x$
\end_inset


\emph default
 
\series bold
in
\series default
 
\begin_inset Formula $model\_probabilities[e][h]$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $x\leftarrow\dfrac{x}{num\_iterations}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
endfor
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
endfor
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
forall
\series default
 
\begin_inset Formula $x$
\end_inset

 
\series bold
in
\series default
 
\begin_inset Formula $independent\_probabilities[a]$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $x\leftarrow\dfrac{x}{|H|\cdot max\_iterations}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
endfor
\end_layout

\begin_layout Plain Layout

\series bold
endfor
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
output:
\series default
 result probabilities 
\begin_inset Formula $\forall a\in A:P(r|a)\leftarrow independent\_probabilities$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
output:
\series default
 result probabilities 
\begin_inset Formula $\forall a\in A,h\in H:P(r|h,a)\leftarrow model\_probabilities$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Calculating action result probabilities.
\begin_inset CommandInset label
LatexCommand label
name "alg:Calculating-the-experiment"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Result Labels
\begin_inset CommandInset label
LatexCommand label
name "sub:Result-Labels"

\end_inset


\end_layout

\begin_layout Standard
We calculate the discrete result probability distributions 
\begin_inset Formula $P\left(r|a\right)$
\end_inset

 and 
\begin_inset Formula $P\left(r|h_{i},a\right)$
\end_inset

.
 To do this, we represent the outcome of an action as a discrete result
 label 
\begin_inset Formula $r\in R$
\end_inset

, were 
\begin_inset Formula $R$
\end_inset

 is a discrete set of all possible outcomes.
 However, the world state at the conclusion of an action is typically represente
d as a multi-dimensional, continuous vector describing various aspects of
 the world (object pose, robot arm joints, etc).
 This world state may contain a large amount of information not related
 to the action performed and the object model.
 To convert the world state into a result label, 
\begin_inset Formula $r$
\end_inset

, we extract the relevant information (for example the object pose) and
 match it to a set of result bins, each of which has a corresponding label
 
\begin_inset Formula $r\in R$
\end_inset

.
 This label is the output result of an action, which can then be used for
 updating the confidence distribution over possible object models.
\end_layout

\begin_layout Standard
The result bins are predefined as an initialisation step of the overall
 system.
 The specific format of the result bins is heavily dependent on the application
 domain.
 A simple example of generating the result bins is by discretising the space
 of possible 
\begin_inset Formula $(x,y,z)$
\end_inset

 object positions into uniform cells.
 After an action is carried out, we match the object pose to the closest
 discretised cell and return the corresponding label.
 A more complex example is performing many simulations and clustering the
 results using an algorithm such as K-means 
\begin_inset CommandInset citation
LatexCommand cite
key "6_kmeans"

\end_inset

 to generate the result bins.
 Different methods of generating discrete result labels are presented in
 detail in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Learning-System-Implementations"

\end_inset

.
\end_layout

\begin_layout Subsection
Choosing an Action
\begin_inset CommandInset label
LatexCommand label
name "sub:Choosing-an-Experiment"

\end_inset


\end_layout

\begin_layout Standard
The robot performs experiments on the real object and observes the results
 to determine some underlying properties of that object.
 However, not all actions that the robot may perform are equally informative.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Good-and-bad"

\end_inset

 illustrates this concept.
 The worst case scenario is if an action produces the same result regardless
 of the properties of the object.
 In this case the information gained is zero.
 Our goal is to choose the most informative action, given the current level
 of uncertainty over the possible object models.
 This reduces the number of actions that must be performed by the robot
 to determine the object's properties, minimising wear and tear on the hardware
 and reducing learning time.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/goodvspoor.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Example good and poor experiments.
\end_layout

\end_inset

Not all actions that a robot can perform to determine the physical model
 of an object are equally informative.
 In the above example, if the robot needs to determine whether the centre
 of mass of a box (indicated by the red circles) is located in the middle
 or at one of the ends, dropping the box in the top orientation will not
 provide much information, as the outcome will be the same in both instances
 (in both cases the centre of mass is on the same side of the vertical line
 drawn from the pivot point).
 The bottom action is more informative as the outcome will depend on the
 centre of mass of the box.
\begin_inset CommandInset label
LatexCommand label
name "fig:Good-and-bad"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To determine the information gain of an action we calculate its expected
 Kullback-Leibler divergence (KL divergence) 
\begin_inset CommandInset citation
LatexCommand cite
key "6_kl_divergence"

\end_inset

.
 KL divergence is a distance measure between two probability distributions
 
\begin_inset Formula $P$
\end_inset

 and 
\begin_inset Formula $Q$
\end_inset

, denoted as 
\begin_inset Formula $D_{KL}\left(P,Q\right)$
\end_inset

.
 For discrete probability distributions P and Q the KL divergence is defined
 as:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula 
\begin{equation}
{\displaystyle D_{KL}\left(P,Q\right)=\underset{i}{\sum}P\left(i\right)\ln\dfrac{P\left(i\right)}{Q\left(i\right)}}\label{eq:KL_divergence_eq}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Formally it is a measure of the expected number of bits needed to encode
 samples from one distribution when using a code based on the other.
 In Bayesian statistics the KL divergence between two distributions can
 be used as measure of the information gained moving from one to the other.
 Furthermore, in the domain of Bayesian optimal experimental design 
\begin_inset CommandInset citation
LatexCommand cite
key "6_bayesian_experiments"

\end_inset

, a common aim is to maximise the KL divergence between the prior and posterior.
 In our system, the robot chooses to perform the experiment with the highest
 expected KL divergence from the current object model confidence distribution,
 thus maximising the expected information gain.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/experiment.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Measure of experiment expected information gain.
\end_layout

\end_inset

To determine the usefulness of an action, we find the expected KL-divergence
 between the prior probability distribution (Current Probability Distribution)
 and the resulting posterior probability distribution after the action is
 performed and result known.
 In the simple example above (with two possible outcomes 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $Y$
\end_inset

, and two hypothesis models 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

) this is equal to 
\begin_inset Formula $P\left(ResultX\right)\cdot D_{KL}\left(CPD,PDW\right)+P\left(ResultY\right)\cdot D_{KL}\left(CPD,PDZ\right)$
\end_inset

, where 
\begin_inset Formula $CPD$
\end_inset

 is the current probability distribution, 
\begin_inset Formula $PDW$
\end_inset

 is the resulting distribution if the outcome is 
\emph on

\begin_inset Formula $X$
\end_inset


\emph default
, and 
\begin_inset Formula $PDZ$
\end_inset

 is the resulting distribution if the outcome is 
\begin_inset Formula $Y$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Expected-KLD"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To calculate the expected KL divergence of an action, we use its probability
 model (presented in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Experiment-Model"

\end_inset

) and the current confidence distribution over object models.
 The outcome of an action is some 
\begin_inset Formula $r\in R$
\end_inset

, and for every possible outcome there is a corresponding new confidence
 distribution (computed using Equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:confidence_update_eq"

\end_inset

).
 To calculate the expected KL divergence, we take the weighted sum of the
 KL divergences between the current confidence distribution and every possible
 resulting distribution, weighted by the probability of the corresponding
 result.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Expected-KLD"

\end_inset

 illustrates this concept for a simple example with only two possible outcomes
 for an action.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Calculating-the-expected"

\end_inset

 gives a step by step description of calculating the expected information
 gain.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\series bold
input:
\series default
 action 
\begin_inset Formula $\rightarrow a$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
input:
\series default
 set of possible models 
\begin_inset Formula $\rightarrow H$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
input:
\series default
 set of possible results 
\begin_inset Formula $\rightarrow R$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
input:
\series default
 current confidence distribution 
\begin_inset Formula $\rightarrow C_{current}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $expected\_information\leftarrow0$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
forall
\series default
 
\begin_inset Formula $r$
\end_inset

 
\series bold
in
\series default
 
\begin_inset Formula $R$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $weight\leftarrow0$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $C_{new}=\left\{ c_{1}^{new},c_{2}^{new},\ldots,c_{n}^{new}\right\} $
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

forall
\series default
 
\begin_inset Formula $h_{i}$
\end_inset

 
\series bold
in
\series default
 
\begin_inset Formula $H$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $weight\leftarrow weight+c_{i}P\left(r|M=h_{i},a\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $c_{i}^{new}\leftarrow\dfrac{P\left(r|M=h_{i},a\right)c_{i}^{current}}{P\left(r|a\right)}$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

endfor
\end_layout

\begin_layout Plain Layout

\series bold
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series default

\begin_inset Formula $expected\_information\leftarrow expected\_information+weight\cdot D_{KL}(C_{current},C_{new})$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
endfor
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
output:
\series default
 expected KL divergence of the action 
\begin_inset Formula $\leftarrow expected\_information$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Calculating the expected KL divergence of an action.
\begin_inset CommandInset label
LatexCommand label
name "alg:Calculating-the-expected"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Relation to Active Machine Learning
\end_layout

\begin_layout Standard
Our system performs active machine learning 
\begin_inset CommandInset citation
LatexCommand cite
key "6_cohn_activelearning"

\end_inset

, which is a form of supervised machine learning.
 It is motivated by problems where unlabelled data is abundant, but labelling
 each training instance is expensive and/or time consuming.
 With active learning, the algorithm has an active role in choosing which
 training instances should be labelled by the supervisor.
 This has the effect of reducing training time and improving accuracy.
\end_layout

\begin_layout Standard
There are many different strategies that can be used to determine which
 training instance should be labelled by the supervisor 
\begin_inset CommandInset citation
LatexCommand cite
key "6_settles_activelearningsurvey"

\end_inset

.
 In our case the most relevant is 
\emph on
query-by-committee
\emph default
 (QBC) 
\begin_inset CommandInset citation
LatexCommand cite
key "6_seung_querybycommittee"

\end_inset

.
 The QBC framework features a committee of competing classifiers, a labelled
 set of training data points on which they are trained, and an unlabelled
 set of data points.
 The aim is to determine the most accurate classifier.
 The competing classifiers are used to generate hypothetical labels for
 the unlabelled data points.
 The data point on which they disagree is considered to be the most informative
 and is then queried to be labelled by the supervisor.
 The outcome of this query is used to update the accuracy of each classifier.
 Kullback-Leibler divergence is one particular method used as a measure
 of disagreement between classifier models, for example active learning
 of document class classification 
\begin_inset CommandInset citation
LatexCommand cite
key "6_em_active_learning"

\end_inset

.
\end_layout

\begin_layout Standard
Our system can be viewed as a QBC active learning task if we consider each
 of the simulated object physics models as a classifier, each of the actions
 that can be performed as an unlabelled training data point, and the robot
 carrying out a particular action on the actual object as the supervisor.
 First, we generate hypothetical labels for each of the actions (unlabelled
 training data points) by performing them in simulation with each of the
 different models (competing classifiers).
 The result of each is a probability distribution over result labels.
 We use the KL divergence measure to choose the action that produces the
 most disagreement.
 We then query the supervisor to obtain a label, which in our case is the
 robot carrying out the chosen action on the actual object.
 This label is then used to update the model likelihood distribution, indicating
 the most accurate object model.
\end_layout

\begin_layout Section
Experimental Results
\begin_inset CommandInset label
LatexCommand label
name "sec:Learning-System-Implementations"

\end_inset


\end_layout

\begin_layout Standard
To test the effectiveness of the object modelling method described in this
 chapter, we perform three experiments.
 In the first experiment (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Centre-of-Mass"

\end_inset

) we show that the method can be used to learn the centre of mass of an
 object by dropping it from different orientations onto a flat surface and
 observing the results.
 The second experiment (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Wheels-Experiment"

\end_inset

) investigates the application of the method to the task of learning the
 wheel configuration of a box-cart object.
 This is done by releasing the box-cart on a sloped ramp in a particular
 orientation and observing the trajectory of the cart.
 The third experiment (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Stimulus-Response-Behaviour"

\end_inset

) demonstrates the general applicability of the learning method by showing
 that it can be used to learn object properties not limited to physical
 attributes.
 In this case, the object is a Lego Mindstorms
\begin_inset Foot
status open

\begin_layout Plain Layout
http://mindstorms.lego.com
\end_layout

\end_inset

 robot programmed to perform a particular movement behaviour in response
 to some stimulation.
 The stimulation is in the form of activating a light sensor on the Lego
 robot.
 The goal of the learning robot is to determine the particular behaviour
 model by using a flashlight to illuminate the light sensors and observing
 the resulting movement of the Lego robot.
\end_layout

\begin_layout Standard
The final experiment demonstrates the benefits of learning a predictive
 model of an object.
 This is done by having the robot plan and perform a tool use task using
 an object and a learned physics engine model of that object.
 The learned model is used to plan an appropriate action in simulation and
 then carry it out to accomplish a goal.
\end_layout

\begin_layout Subsection
Centre of Mass Experiment
\begin_inset CommandInset label
LatexCommand label
name "sub:Centre-of-Mass"

\end_inset


\end_layout

\begin_layout Subsubsection
Overview
\end_layout

\begin_layout Standard
In this experiment we apply the presented active robot learning method to
 the task of finding the centre of mass of an object.
 This is done with two different objects: a box and a cylinder.
 The robot must determine the centre of mass of each by dropping them onto
 a flat surface.
 The dimensions of the box object are 
\emph on

\begin_inset Formula $5.5cm\times8.4cm\times11.9cm$
\end_inset

,
\emph default
 the cylinder object is 
\emph on

\begin_inset Formula $13cm$
\end_inset


\emph default
 in height (along the z-axis) and 
\emph on

\begin_inset Formula $6cm$
\end_inset


\emph default
 in diameter (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Box-and-Can."

\end_inset

).
 Both the cylinder and the box may have weights added internally to change
 the location of their centre-of-mass.
 The drop orientations and heights are chosen to have the highest expected
 information gain.
 This is done using the previously described method of finding the most
 informative action from a set of available actions.
 A physics simulator is used to simulate the various possible object models
 and actions.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/canbox.png
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Cylinder and box object dimensions.
\end_layout

\end_inset

The cylinder (left) and box (right) objects used in the 
\emph on
Centre of Mass Experiment
\emph default
.
 Each can be unweighted, in which case it has a centre of mass in the centre,
 or can have weights added internally to offset the centre of mass.
\begin_inset CommandInset label
LatexCommand label
name "fig:Box-and-Can."

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
To find the centre of mass of the box and cylinder objects, the robot performs
 the following steps:
\end_layout

\begin_layout Enumerate
localise the target object in the scene,
\end_layout

\begin_layout Enumerate
grasp the object with the robot gripper,
\end_layout

\begin_layout Enumerate
calculate the information gain of each action given the current model likelihood
 distribution,
\end_layout

\begin_layout Enumerate
carry out the most informative action by dropping the object from the specified
 height and orientation,
\end_layout

\begin_layout Enumerate
determine the resulting pose of the object,
\end_layout

\begin_layout Enumerate
classify the resulting pose by matching it to a result label,
\end_layout

\begin_layout Enumerate
update the model likelihood distribution using the outcome probabilities
 of the performed action and the result label.
\end_layout

\begin_layout Standard
The object is localised in a scene using the method described in Chapter
 5, using a complete aspect graph of SIFT 
\begin_inset CommandInset citation
LatexCommand cite
key "3_Lowe_sift"

\end_inset

 features and a depth camera.
 In the case of a box and cylinder objects, grasping is performed along
 the longest axis of each object with the vector between the two gripper
 pads parallel to the ground plane.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:before-after-drop"

\end_inset

 shows a before and after image of the robot performing a drop experiment
 on the box object.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/drop_before_after.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Drop experiment before and after states.
\end_layout

\end_inset

The before (left) and after (right) state of a single iteration of the 
\emph on
Centre of Mass Experiment
\emph default
.
 The robot positions the box object in an appropriate orientation and height
 above the flat table-top, and then releases it.
 The resulting orientation of the object provides information on the location
 of its centre of mass.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:before-after-drop"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next we will present the following: the possible models that can describe
 the objects and the actions that the robot can perform (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Object-Models-and"

\end_inset

), the simulation method used to determine the action probability models
 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Simulation-Method"

\end_inset

), the method of labelling the result of each drop action with a discrete
 label (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Result-Classification"

\end_inset

), and the performance results of applying the object model learning method
 to determining the centre of mass of a box and cylinder object (Section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Performance-Results"

\end_inset

).
\end_layout

\begin_layout Subsubsection
Possible Object Models and Actions
\begin_inset CommandInset label
LatexCommand label
name "sub:Object-Models-and"

\end_inset


\end_layout

\begin_layout Standard
The goal for the robot is to determine which of the models, from an 
\emph on
a priori
\emph default
 defined set of possible models, best fits the object in question.
 This is done by performing actions drawn from a pre-defined pool.
 For this experiment, we define three possible centre-of-mass models for
 both the box and cylinder (shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:drop_models"

\end_inset

).
 In the case of the box, the possible models have their centre-of-mass either
 in the middle of the box, or offset half-way along the main axis.
 The coordinates (in centimetres) of the centre-of-mass of the three possible
 box models are: 
\begin_inset Formula $(0,0,0)$
\end_inset

, 
\begin_inset Formula $(0,0,3)$
\end_inset

, and 
\begin_inset Formula $(0,0,-3)$
\end_inset

.
 The coordinate 
\begin_inset Formula $(0,0,0)$
\end_inset

 corresponds to the centre of the box.
 In the case of the cylinder, the possible models also have their centre-of-mass
 either in the middle, or offset half-way along the main axis.
 The coordinates (in centimetres) of the centre-of-mass of the three possible
 cylinder models are: 
\begin_inset Formula $(0,0,0)$
\end_inset

, 
\begin_inset Formula $(0,0,3.5)$
\end_inset

, and 
\begin_inset Formula $(0,0,-3.5)$
\end_inset

.
 The coordinate 
\begin_inset Formula $(0,0,0)$
\end_inset

 corresponds to the centre of the cylinder.
\end_layout

\begin_layout Standard
The actions that the robot can perform on the box and cylinder is dropping
 each from a specified orientation and height.
 The drop height is defined as the distance between the flat tablet-top
 and the nearest point on the object's surface.
 The drop orientation is defined as the upward facing direction of the object
 at the time of release, as dropping an object onto a flat surface has rotationa
l symmetry around the vertical axis.
 The pool of available actions is specified 
\emph on
ad hoc
\emph default
 to consist of 
\begin_inset Formula $100$
\end_inset

 instances, each with a randomly generated drop height (in the range 
\begin_inset Formula $0.5cm$
\end_inset

 to 
\begin_inset Formula $2cm$
\end_inset

) and drop orientation.
 The drop height is generated by choosing a random value in the specified
 range 
\begin_inset Formula $[0.5,2.0]$
\end_inset

, the drop orientation is generated by choosing a random unit vector.
 
\end_layout

\begin_layout Standard
The robot performs actions drawn from this pool to determine which of the
 pre-defined models best matches the box and cylinder object.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/drop_models.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Possible box and cylinder centre of mass models.
\end_layout

\end_inset

The potential models for the box and cylinder objects.
 Each can be described by one of three models, with the centre of mass (denoted
 by the red dot) in the middle (model A), or with the centre of mass offset
 half way to the end along the longest axis of the object (models B and
 C).
\begin_inset CommandInset label
LatexCommand label
name "fig:drop_models"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Simulation Method
\begin_inset CommandInset label
LatexCommand label
name "sub:Simulation-Method"

\end_inset


\end_layout

\begin_layout Standard
Our method for learning the properties of an object involves simulating
 the outcome of various actions performed on the different possible object
 models.
 This is done to calculate the action probability model (ie: the probabilities
 
\begin_inset Formula $P\left(r|h,a\right)$
\end_inset

 and 
\begin_inset Formula $P(r|a)$
\end_inset

 discussed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Experiment-Model"

\end_inset

).
 This is then used to update the confidence distribution after an action
 is performed and a result observed, as well as to calculate the expected
 KL divergence of the different actions to perform the most informative
 one.
\end_layout

\begin_layout Standard
To simulate the actions and find their conditional probability distributions
 we use the Bullet Physics Engine
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.bulletphysics.com
\end_layout

\end_inset

 (version 2.76), which is capable of simulating the interactions between
 various bodies.
 This includes collision detection between bodies, soft-body and rigid-body
 dynamics, as well as being able to simulate various types of joints, hinges,
 and axles.
 
\end_layout

\begin_layout Standard
For the 
\emph on
Centre of Mass Experiment
\emph default
, the flat workspace surface is simulated by an infinite plane with friction
 set to 
\begin_inset Formula $1.0$
\end_inset

, and the gravity vector set to 
\begin_inset Formula $(0,0,-9.8)$
\end_inset

 
\begin_inset Formula $m/s^{2}$
\end_inset

.
 The box and cylinder are simulated by a 
\emph on
ConvexHull 
\emph default
rigid body, with friction set to 
\begin_inset Formula $0.7$
\end_inset

, restitution parameter set to 
\begin_inset Formula $0.01$
\end_inset

, linear damping parameter set to 
\begin_inset Formula $0.05$
\end_inset

, and angular damping set to 
\begin_inset Formula $0.5$
\end_inset

.
 These parameters were chosen to give visually realistic simulations.
 The mass of the simulated objects does not affect the outcome of a simulated
 actions and is set to 
\begin_inset Formula $1.0$
\end_inset

.
\end_layout

\begin_layout Standard
For simulation, we simplify the action significantly.
 We do not simulate the robot arm grasping the object, moving it into position
 and releasing the object.
 Instead, the simulated object is set to the appropriate orientation and
 height above the ground plane (as specified by the drop parameters) and
 released.
 To model the noise and errors resulting from the robot manipulating an
 object in the real world, the simulated object's position and orientation
 are perturbed from the values specified by the simulated action.
 Gaussian noise is added to the drop height with a mean of 
\begin_inset Formula $0cm$
\end_inset

 and standard deviation of 
\begin_inset Formula $0.5cm$
\end_inset

, while the orientation is rotated around a random vector by an amount specified
 by a Gaussian noise variable with mean 
\begin_inset Formula $0\textdegree$
\end_inset

 and standard deviation of 
\begin_inset Formula $10\textdegree$
\end_inset

.
 These values were chosen as conservative over-estimates of the errors of
 the robot manipulation of the objects, based on our experience with the
 robot.
\end_layout

\begin_layout Standard
After setting the simulated object to the appropriate pose, the physics
 simulator is run for 
\begin_inset Formula $300$
\end_inset

 frames, each frame corresponding to 
\begin_inset Formula $\frac{1}{30}$
\end_inset

 of a second.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:drop-phys-sim"

\end_inset

 shows a before and after screenshot of dropping a box in a physics simulation.
 At the conclusion of a simulation, the resting pose of the object is converted
 to a discrete result label.
 This is discussed in the following section.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/drop0.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Before and after states of the simulated drop experiment.
\end_layout

\end_inset

Before (left) and after (right) screenshots of a simulated action, dropping
 a box object in a physics engine from a particular orientation and height.
 The image on the left shows the world state when the box is released, the
 right image shows the final pose of the box after it has come to a stop.
\begin_inset CommandInset label
LatexCommand label
name "fig:drop-phys-sim"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Result Classification
\begin_inset CommandInset label
LatexCommand label
name "sub:Result-Classification"

\end_inset


\end_layout

\begin_layout Standard
Our method requires the outcome of an action to be expressed as a discrete
 result label 
\begin_inset Formula $r\in R$
\end_inset

, where 
\begin_inset Formula $R$
\end_inset

 is a finite set of all possible result labels (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Result-Labels"

\end_inset

).
 This is due to the fact that the action model is represented as a discrete
 probability distribution over the result labels (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Experiment-Model"

\end_inset

).
 For a robot action, the outcome is generically some world state described
 by a continuous variable.
 By discretising the relevant information, this world state can be converted
 into a result label.
\end_layout

\begin_layout Standard
In this experiment, the relevant part of the world state is the resting
 pose of the object.
 For effectively classifying the results of a drop, the full 6 degrees of
 freedom pose of the object is not required.
 Only the upward facing direction of the object is needed.
 The upward direction vector is calculated using the following formula:
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $up\_vector=M^{-1}\left(0,0,1\right)^{T}$
\end_inset

,
\end_layout

\begin_layout Standard
where 
\begin_inset Formula $M$
\end_inset

 is the object's world space orientation matrix and 
\begin_inset Formula $\left(0,0,1\right)^{T}$
\end_inset

 is the world 
\begin_inset Quotes eld
\end_inset

up
\begin_inset Quotes erd
\end_inset

 direction.
 The next step is to discretise the outcome up-vector of the object to form
 a result label.
 This is done by matching the up-vector to a predetermined set of result
 bins.
\end_layout

\begin_layout Standard
There are several ways in which these result bins can be defined.
 The most straight forward is to subdivide the unit sphere of up-vectors
 into uniform sections, with each section corresponding to a result bin.
 This approach, however, is not optimal for objects such as a box and cylinder.
 In the case of a six-sided box, there are only six possible up-vectors
 that can be the outcome of a drop action (corresponding to one of the sides
 facing upward).
 Similarly with a cylinder, only a subset of all up-vectors is possible
 in the outcome.
 In this case, the cylinder can have either of its flat ends facing up,
 or the rounded side.
\end_layout

\begin_layout Standard
To generate the appropriate result bins for the 
\emph on
Centre of Mass Experiment
\emph default
 we use clustering.
 The reasoning behind this is to group together up-vectors that are logically
 similar into the same buckets.
 This clustering stage is performed at initialisation, prior to the experiment
 loop or the building of the action models.
 This involves running many simulations of actions on all of the possible
 object models, recording the outcome result and finally clustering all
 of the recorded results into bins.
 This scheme is outlined in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Result-binning."

\end_inset

.
 
\end_layout

\begin_layout Standard
In the case of this experiment, this is done by taking the outcome up-vectors
 from many simulated runs and grouping together vectors that are within
 
\begin_inset Formula $45\textdegree$
\end_inset

 of one another.
 Each up-vector is viewed as a graph node and any two vectors within 
\begin_inset Formula $45\textdegree$
\end_inset

 of each other are joined by a graph edge.
 This is done because the box and cylinder have their faces separated by
 
\begin_inset Formula $90\textdegree$
\end_inset

 intervals.
 The resulting graph of up-vector nodes will have multiple connected components,
 with each component corresponding to a result bucket.
 In the case of the box, the result is six connected components, corresponding
 to the six sides.
 In the case of the cylinder, the result is three connected components,
 two for the flat ends and one for the round side.
 Each of these groups of up-vectors are stored as a result bucket.
 When an action is performed (or simulated when building the action models),
 the resulting object up-vector is taken and compared against these result
 buckets.
 The result bucket which contains the closest up-vector is taken to be the
 matching result label, 
\begin_inset Formula $r$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/result_bins.png
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Clustering of experiment results to generate result labels.
\end_layout

\end_inset

This diagram outlines how result bins are generated.
 The available actions are run multiple times on all of the available object
 models in simulation.
 The set of output results is then clustered or discretised to create a
 smaller set of possible result bins.
 These are later used for result labelling.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:Result-binning."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Performance Results
\begin_inset CommandInset label
LatexCommand label
name "sub:Performance-Results"

\end_inset


\end_layout

\begin_layout Standard
We test the performance of the learning system by having the robot carry
 out multiple runs of learning the object model.
 In each run the robot performs a series of actions, updating the confidence
 distribution over the possible models using the result of each action.
 By performing the most informative action at every stage and using the
 learned action models, the robot's confidence distribution should have
 the matching object model's confidence rise to 
\begin_inset Formula $1.0$
\end_inset

 and the remaining models' confidence fall to 
\begin_inset Formula $0.0$
\end_inset

 as more actions are performed.
\end_layout

\begin_layout Standard
The robot performed eight separate trials of determining the object model
 of the box.
 In each, trial the robot performed nine drops.
 This procedure was done with the box unweighted (centre-of-mass in the
 middle) and with the box having weights added internally (centre of mass
 offset 
\begin_inset Formula $-3cm$
\end_inset

 from the middle along the z-axis).
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Box-drop-experiment"

\end_inset

 shows how the robot's model confidence distribution changed during the
 nine drops.
 It can be seen that after even a small number of drops, the confidence
 of the object's correct corresponding model rises above the remaining incorrect
 models.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/box.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Centre of mass experiment results for box object.
\end_layout

\end_inset

The results of the 
\emph on
Centre of Mass Experiment
\emph default
 on the box object, showing the change in the confidence distribution after
 a number of drop iterations.
 The robot performs multiple drops of the box and updates its model hypothesis
 based on the results.
 The left graph corresponds to the trials with an unweighted box with the
 centre of mass at 
\begin_inset Formula $(0,0,0)$
\end_inset

, with the matching object model indicated as 
\emph on
Central CoG Model
\emph default
.
 The right graph corresponds to the trials with a weighted box with the
 centre of mass at 
\begin_inset Formula $(0,0,3)$
\end_inset

, with the matching object model indicated as 
\emph on
Z+ CoG Model
\emph default
.
 The error bars represent the 
\begin_inset Formula $95\%$
\end_inset

 confidence interval across 8 independent runs.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:Box-drop-experiment"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the cylinder object, the robot performed eight separate trials, with
 each trial consisting of six drops.
 This is done with the cylinder unweighted (centre of mass located in the
 middle), and with weights added internally (centre of mass offset 
\begin_inset Formula $-3.5cm$
\end_inset

 from the middle along the z-axis).
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Can-drop-experiment."

\end_inset

 shows the change in the confidence distribution over the possible models
 during the trials.
 We can see from the results that the robot is able to quickly and accurately
 determine the correct model of the object by performing the action with
 the highest information gain.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/vcan.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Centre of mass experiment results for the cylinder object.
\end_layout

\end_inset

The results of the 
\emph on
Centre of Mass Experiment
\emph default
 on the cylinder object, showing the change in the confidence distribution
 after a number of drop iterations.
 The robot performs multiple drops of the cylinder and updates its model
 hypothesis based on the results.
 The left graph corresponds to an unweighted cylinder with centre of mass
 at 
\begin_inset Formula $(0,0,0)$
\end_inset

, the right graph to a weighted cylinder with the centre of mass offset
 to 
\begin_inset Formula $(0,0,-3.5)$
\end_inset

 along the main axis.
 The error bars represent the 
\begin_inset Formula $95\%$
\end_inset

 confidence interval of the hypothesis across 8 independent runs.
\begin_inset CommandInset label
LatexCommand label
name "fig:Can-drop-experiment."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In addition to evaluating the performance of the active learning framework
 when applied to determining the centre of mass of an object, we investigated
 the effect of choosing the action with highest expected information gain
 on the learning rate.
 A key part of the learning framework is choosing to perform the most informativ
e action, as measured by expected KL divergence.
 We compared in simulation a robot learning the centre of mass of a box
 and cylinder using the most informative action at every step and using
 a random action at every step.
 It is important to note that this is carried out purely in simulation,
 the actions are simulated in the same manner as when building the action
 model.
 For the best action and random action selection policies, six simulated
 runs are performed, each with nine drop actions performed.
 The progression of the confidence distribution over the possible object
 models is show in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:box-action-sim"

\end_inset

 for the box object, and in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cylinder-action-sim"

\end_inset

 for the cylinder object.
 It can be seen that by choosing the most informative action leads to a
 much faster convergence of the confidence distribution to the correct object
 model, whereas choosing a random action leads to much worse performance.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/box_sim.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Information gain comparison for the centre of mass experiment.
\end_layout

\end_inset

Learning the box centre of mass using the action with highest expected informati
on gain (left), and using a random action (right) at every iteration.
 This is performed in simulation, and simulated box has its centre of mass
 in the centre (corresponding to the Centre CoG Model).
 It can be seen that by performing the most informative action the confidence
 distribution quickly converges on the correct object model.
 When performing a random action, the confidence distribution on average
 does not converge.
 The error bars indicate the 
\begin_inset Formula $95\%$
\end_inset

 confidence interval, with the error bars on the left too small to show.
\begin_inset CommandInset label
LatexCommand label
name "fig:box-action-sim"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/can_sim.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Information gain comparison for the centre of mass experiment.
\end_layout

\end_inset

Learning the cylinder centre of mass using the action with highest expected
 information gain (left), and using a random action (right) at every iteration.
 This is performed in simulation, and the simulated cylinder has its centre
 of mass in the centre (corresponding to the Centre CoG Model).
 It can be seen that by performing the most informative action the confidence
 distribution quickly converges on the correct object model, as compared
 to performing a random action.
 The error bars indicate the 
\begin_inset Formula $95\%$
\end_inset

 confidence interval.
\begin_inset CommandInset label
LatexCommand label
name "fig:cylinder-action-sim"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Wheel Configuration Experiment
\begin_inset CommandInset label
LatexCommand label
name "sub:Wheels-Experiment"

\end_inset


\end_layout

\begin_layout Subsubsection
Overview
\end_layout

\begin_layout Standard
In this experiment we apply the active robot learning method to the task
 of learning the configuration of the wheels on a box-cart (pictured in
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wheels-object."

\end_inset

).
 The box-cart consists of a rectangular prism body, two wheels attached
 at one end, and a wooden block at the other.
 The configuration of the two wheels is unknown to the robot, specifically
 how they are oriented and whether they are able to rotate.
 For this experiment the workspace consists of a flat surface and a 
\begin_inset Formula $25\textdegree$
\end_inset

 ramp at one end (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wheels-experiment-layout."

\end_inset

).
 The robot determines the configuration of the box-cart by releasing it
 on the sloped ramp from various orientations and observing the resting
 pose of the object.
 By choosing the release pose with the highest expected information gain,
 the robot is able to efficiently determine the object model that describes
 the box-cart.
 To choose an optimal action and to update the model confidence distribution,
 a physics engine is used to simulate the outcome of the different actions
 on the possible object models.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/wheels.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Box-cart object.
\end_layout

\end_inset

The box cart object used for the 
\emph on
Wheel Configuration Experiment
\emph default
.
 The cart consists of a box, two wheels on one end, and a wooden block on
 the opposite end.
 The wheels can be set to point straight ahead or 
\begin_inset Formula $90\textdegree$
\end_inset

 to the side.
 The wheels may also be prevented from rotating by the application of sticky-tap
e.
\begin_inset CommandInset label
LatexCommand label
name "fig:Wheels-object."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/wheels_experiment.png
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Box-cart experiment layout.
\end_layout

\end_inset

The workspace layout for the 
\emph on
Wheel Configuration Experiment
\emph default
.
 The robot places the box-cart on a 
\begin_inset Formula $25\textdegree$
\end_inset

 ramp and releases it, allowing it to roll down.
 The final pose of the cart provides the robot with information regarding
 the configuration of the wheels.
\begin_inset CommandInset label
LatexCommand label
name "fig:Wheels-experiment-layout."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The procedure followed by the robot in this experiment is similar to the
 
\emph on
Centre of Mass Experiment
\emph default
.
 To find the wheel configuration of the box-cart, the robot repeats the
 following steps:
\end_layout

\begin_layout Enumerate
localise the target box-cart in the scene;
\end_layout

\begin_layout Enumerate
grasp the cart with the robot gripper;
\end_layout

\begin_layout Enumerate
calculate the information gain of each action given the current model likelihood
 distribution;
\end_layout

\begin_layout Enumerate
carry out the most informative action by releasing the cart from the appropriate
 pose on the ramp;
\end_layout

\begin_layout Enumerate
determine the resulting pose of the cart;
\end_layout

\begin_layout Enumerate
classify the resulting pose by matching it to a result label;
\end_layout

\begin_layout Enumerate
update the model likelihood distribution using the outcome probabilities
 of the performed action and the result label.
\end_layout

\begin_layout Standard
The cart is localised in a scene using the method described in Chapter 5,
 with a complete aspect graph of SIFT features and a depth camera.
 Grasping is performed along the longest axis of the top of the cart, with
 the vector between the two gripper pads parallel to the ground plane.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:before-after-cart"

\end_inset

 shows a before and after image of the robot performing a drop experiment
 on the box object.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/roll_before_after.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Box-cart experiment before and after states.
\end_layout

\end_inset

The before (left) and after (right) state of an iteration of the 
\emph on
Wheel Configuration Experiment
\emph default
.
 The robot positions the box-cart object in a particular orientation and
 position on the sloped ramp, and then releases it.
 The resulting pose of the cart provides information on the configuration
 of its wheels.
\begin_inset CommandInset label
LatexCommand label
name "fig:before-after-cart"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next we will present the possible models that can describe the box-cart
 and the actions that the robot can perform (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Object-Models-and1"

\end_inset

), the simulation method used to determine the action probability models
 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Simultion-Method1"

\end_inset

), the method of labelling the result of each action with a discrete label
 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Result-Classification1"

\end_inset

), and the performance results of using the object model learning method
 to determining the wheel configuration of a cart object (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Performance-Results1"

\end_inset

).
\end_layout

\begin_layout Subsubsection
Possible Object Models and Actions
\begin_inset CommandInset label
LatexCommand label
name "sub:Object-Models-and1"

\end_inset


\end_layout

\begin_layout Standard
The robot's goal is to determine which model from a predefined set of models
 best fits the box-cart.
 For this experiment we define the set of possible models to consist of
 six different wheel configurations (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wheels-experiment-models."

\end_inset

).
 The two wheels of the box-cart may both be pointing straight ahead or both
 
\begin_inset Formula $90\textdegree$
\end_inset

 to the side, and they may freely rotate or either of the two wheels may
 be taped shut (but not both).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/wheels_models.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Possible box-cart wheel configurations.
\end_layout

\end_inset

The above diagram depicts the 6 different potential models of the box-cart.
 Models 1, 3, and 5 have wheels oriented in the direction of the main axis,
 models 2, 4, and 6 have wheels oriented at 
\begin_inset Formula $90\textdegree$
\end_inset

 to the main axis.
 Models 1 and 2 have freely rotating wheels, models 3 and 4 have the right
 wheel blocked (prevented from rotating), models 5 and 6 have the left wheel
 blocked.
\begin_inset CommandInset label
LatexCommand label
name "fig:Wheels-experiment-models."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The actions that the robot can perform are releasing the cart on the ramp
 at a particular vertical height and orientation.
 The cart's wheels and rear block are in contact with the ramp surface at
 the time of release.
 The vertical height of the release is defined as the vertical distance
 of the centre of the cart from the horizontal ground plane.
 The orientation of the cart is defined as the angle it is facing in the
 horizontal plane at the time of release.
 For our experiments, we restricted the release height of the cart to be
 between 
\begin_inset Formula $2cm$
\end_inset

 and 
\begin_inset Formula $8cm$
\end_inset

.
 This was determined by the maximum height of the available ramp, and the
 size of the cart constraining the minimum height at which it was positioned
 wholly on the ramp.
 In this height range, we generated experiments at 
\begin_inset Formula $1cm$
\end_inset

 height increments (giving seven different heights), and at each height
 we generated 
\begin_inset Formula $30$
\end_inset

 possible experiments with orientations in 
\begin_inset Formula $12\textdegree$
\end_inset

 increments.
 We judged this discretisation of the action space to be sufficient, given
 the accuracy of our robot's manipulation and the workspace, to give a represent
ative sample of actions.
 This results in a pool of 
\begin_inset Formula $210$
\end_inset

 possible actions for the robot to choose from to determine the wheel configurat
ion of the box-cart.
\end_layout

\begin_layout Subsubsection
Simulation Method
\begin_inset CommandInset label
LatexCommand label
name "sub:Simultion-Method1"

\end_inset


\end_layout

\begin_layout Standard
As with the 
\emph on
Centre of Mass Experiment
\emph default
, to determine the probability models (ie: the probabilities 
\begin_inset Formula $P\left(r|h,a\right)$
\end_inset

 and 
\begin_inset Formula $P(r|a)$
\end_inset

 discussed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Experiment-Model"

\end_inset

) for each action, we use the Bullet Physics Engine to simulate the outcome
 for each possible action on each possible object model.
 In the case of a physics simulation, there are many parameters that must
 be set to simulate an object.
 Some parameters we measured and set appropriately (eg: the weight of the
 cart).
 For parameters that we could not easily measure (coefficient of friction),
 or that do not have a direct real-world analogue (angular damping of a
 rotating wheel), we chose simulation parameters that resulted in a visually
 realistic outcome.
\end_layout

\begin_layout Standard
The ramp and flat table surface are simulated with two planes with friction
 coefficient set to 
\begin_inset Formula $0.7$
\end_inset

, the gravity vector set to 
\begin_inset Formula $(0,0,-9.8)$
\end_inset

 
\begin_inset Formula $m/s^{2}$
\end_inset

.
 The box-cart object is simulated by two box rigid bodies for the main body
 and rear block, and two cylinder objects for the wheels.
 The rear block object is joined to the main box by a rigid six degrees
 of freedom constraint, forcing them to behave as a single rigid body.
 The two cylinders are joined to the box by hinge constraints.
 The direction of the hinge constraint is defined by the particular model
 being simulated (whether the wheels of the model are pointing ahead or
 to the side).
 The rear block and wheel friction coefficient is set to 
\begin_inset Formula $0.7$
\end_inset

.
 The mass of the main box object is set to 
\begin_inset Formula $150$
\end_inset

 grams and the mass of each wheel and the rear block is set to 
\begin_inset Formula $20$
\end_inset

 grams; this matches the measured weight of the real world box-cart components.
 The angular damping parameter of each wheel is set to either 
\begin_inset Formula $0.15$
\end_inset

 or 
\begin_inset Formula $1.0$
\end_inset

, depending on whether the wheel in the particular model being simulated
 is free to rotate or not.
 
\end_layout

\begin_layout Standard
As with the 
\emph on
Centre of Mass
\noun on
 
\noun default
Experiment
\emph default
, we simplify the action during simulation.
 Instead of simulating the robot arm grasping the object and moving it into
 position, the simulated object is directly set to the appropriate orientation
 and position on the ramp, as specified by the action parameters.
 When the robot performs an action in the real world, there are several
 sources of noise and error that affect the outcome.
 This includes errors in the positioning of the box-cart on the ramp, slight
 variations in the ramp and tabletop surface, variations in the wheel axle's
 turning resistance, etc.
 To account for these sources of noise when performing a simulated action,
 we perturb the release height and orientation as well as perturbing the
 axle damping parameters for each wheel.
 The release height and orientation are perturbed by Gaussian noise with
 mean 
\begin_inset Formula $0$
\end_inset

 and standard deviation set to 
\begin_inset Formula $0.5cm$
\end_inset

 and 
\begin_inset Formula $10\textdegree$
\end_inset

 respectively.
 The wheel damping parameters, wheel friction, and rear block friction are
 each perturbed by uniform noise in the range 
\begin_inset Formula $[-0.1,0.1]$
\end_inset

.
\end_layout

\begin_layout Standard
After settings the simulated box-cart to the appropriate pose, the physics
 simulation is run for 
\begin_inset Formula $300$
\end_inset

 frames, each frame corresponding to 
\begin_inset Formula $\frac{1}{30}$
\end_inset

 of a second.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cart-phys-sim"

\end_inset

 shows a before and after screenshot of a release action carried out in
 physics engine simulation.
 At the conclusion of a simulation, the resting pose of the simulated object
 is converted to a discrete result label.
 This is discussed in the next section.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/wheels_sim.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Box-cart simulated experiment before and after states.
\end_layout

\end_inset

Before (left) and after (right) screenshots of a simulated action, releasing
 a box-cart object on a ramp in the physics engine.
 The image on the left shows the world state when the box-cart is released,
 the right image shows the final pose of the box-cart after it has come
 to a stop.
\begin_inset CommandInset label
LatexCommand label
name "fig:cart-phys-sim"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Result Classification
\begin_inset CommandInset label
LatexCommand label
name "sub:Result-Classification1"

\end_inset


\end_layout

\begin_layout Standard
Our method requires that the outcome of an action is a discrete result label
 
\begin_inset Formula $r\in R$
\end_inset

.
 This is done by discretising the relevant information from the outcome
 world state of an action.
 In the case of the 
\emph on
Wheel Configuration Experiment
\emph default
, the discretisation is performed using the pose of the box-cart after it
 has rolled down the ramp and come to rest.
 The resting pose is constrained to be on the surface of the flat tabletop
 or ramp, and we assume the box-cart remains upright.
 Therefore, we can simplify the full six degrees of freedom cart pose by
 expressing the result as the 
\begin_inset Formula $(x,y)$
\end_inset

 position and an angle 
\begin_inset Formula $\theta$
\end_inset

 for the orientation of the cart on the tabletop plane.
 For labelling the simplified pose we use a uniform discretisation scheme.
 The workspace is divided into cells, 
\begin_inset Formula $3cm\times3cm$
\end_inset

 in size and orientations are divided into 
\begin_inset Formula $10\textdegree$
\end_inset

 increments.
 Each of these cells corresponds to a single result bin.
 An 
\begin_inset Formula $(x,y,\theta)$
\end_inset

 result pose can be mapped to a result bin by finding the particular cell
 which contains the result pose.
 The matching cell for the box-cart pose is taken to be the result label,
 
\begin_inset Formula $r$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Performance Results
\begin_inset CommandInset label
LatexCommand label
name "sub:Performance-Results1"

\end_inset


\end_layout

\begin_layout Standard
We test the performance of the learning system by having the robot carry
 out multiple runs learning the box-cart model.
 In each run the robot performs a series of actions, updating the confidence
 distribution over the possible models using the result of each action.
\end_layout

\begin_layout Standard
The robot performed six separate trials of determining the object model
 of the box.
 In each trial, the robot rolled the cart down the ramp six times.
 This was repeated with the box-cart's wheels set to all six of the possible
 configurations (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wheels-experiment-models."

\end_inset

).
 The results of these trials are presented in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wheels-ramp-experiment."

\end_inset

, showing how the robot's model confidence distribution changed during the
 course of the trials.
 Each of the separate graphs corresponds to a different configuration of
 the box-cart object.
 It can be seen that very quickly the confidence of the object's corresponding
 model rises above the remaining incorrect models.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/roll.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Box-cart experiment results.
\end_layout

\end_inset

The results of the 
\emph on
Wheel Configuration Experiment
\emph default
 in terms of the model confidence distribution after a number of release
 iterations.
 The underlying configuration of the physical box-cart in each of the above
 runs matches the corresponding configuration shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wheels-experiment-models."

\end_inset

.
 The error bars signify the 
\begin_inset Formula $95\%$
\end_inset

 confidence interval.
 We label only the correct object model confidence in each graph.
 This is the model corresponding to the true underlying configuration of
 the box cart.
\begin_inset CommandInset label
LatexCommand label
name "fig:Wheels-ramp-experiment."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In additional to evaluating the learning performance, we investigated the
 effect of choosing the action with highest expected information gain on
 the learning rate.
 We compare, in simulation, a robot learning the box-cart's wheel configuration
 using the most informative action at every step and using a random action
 at every step.
 It is important to note that this is carried out purely in simulation.
 The actions are simulated in the same manner as when building the action
 model.
 For the best action and random action selection policies, six simulated
 runs are performed, each with nine actions performed.
 The progression of the confidence distribution over the possible object
 models is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cart-sim"

\end_inset

.
 It can be seen that by choosing the most informative action results in
 a much faster convergence of the confidence distribution to the correct
 object model, whereas choosing a random action leads to much worse performance.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/roll_sim.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Information gain of box-cart experiments.
\end_layout

\end_inset

Learning the box-cart wheel configuration using the action with highest
 expected information gain (left), and using a random action (right) at
 every iteration.
 This is performed in simulation with the simulated box-cart having its
 wheels set to configuration 4 as seen in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wheels-experiment-models."

\end_inset

.
 By performing the most informative action the confidence distribution quickly
 converges on the correct object model.
 When performing a random action, the confidence distribution on average
 does not reliably converge.
 The error bars indicate the 
\begin_inset Formula $95\%$
\end_inset

 confidence interval.
\begin_inset CommandInset label
LatexCommand label
name "fig:cart-sim"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Stimulus Response Behaviour Experiment
\begin_inset CommandInset label
LatexCommand label
name "sub:Stimulus-Response-Behaviour"

\end_inset


\end_layout

\begin_layout Subsubsection*
Overview
\end_layout

\begin_layout Standard
In this experiment, we demonstrate that the general active learning method
 is applicable to a wide variety of object properties.
 In this case, the robot determines a behavioural model of an object, rather
 than a physical property.
 The object in question is a Lego Mindstorms
\begin_inset Foot
status open

\begin_layout Plain Layout
http://mindstorms.lego.com
\end_layout

\end_inset

 bot which is programmed to respond to light stimuli.
 The Lego-bot is composed of two motor driven wheels, and two light sensors
 (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Lego-Mindstorms-robot."

\end_inset

).
 It is programmed to perform a certain movement behaviour if one of its
 sensors is stimulated by light.
 A sensor is said to be stimulated if it detects a high light level as compared
 to the other sensor.
 An example movement behaviour is turn left 
\begin_inset Formula $45\textdegree$
\end_inset

 and move forward 
\begin_inset Formula $15cm$
\end_inset

 if the left light sensor is stimulated.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/lego_img.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Lego Mindstorms robot layout.
\end_layout

\end_inset

Lego Mindstorms robot.
 It is composed of the NXT Intelligent brick, two motor driven rear wheels,
 and two light sensors.
 The light sensors are facing forward and downward at a 
\begin_inset Formula $45\textdegree$
\end_inset

 angle.
\begin_inset CommandInset label
LatexCommand label
name "fig:Lego-Mindstorms-robot."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The task of the main robot is to perform some actions to determine a model
 that describes the Lego-bot's movement behaviour.
 For this purpose, a flashlight is attached to the gripper, which the robot
 can use to project light onto the workspace.
 This is illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Light-sensing-bot"

\end_inset

.
 The robot can shine the flashlight onto specific areas of the workspace
 and observe the resultant Lego bot's motion.
 This motion provides information as to the bot's underlying programmed
 behaviour.
 A simulator is used to predict the outcome of the various possible actions
 on the possible object models.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/light.png
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Lego Mindstorms experiment workspace layout.
\end_layout

\end_inset

The robot uses a flashlight attached to the gripper to perform illumination
 actions to determine the light stimulation response behaviour of the Lego
 Mindstorms bot.
 An action is in the form of shining the flashlight onto the workspace to
 stimulate the light sensors on the Lego bot.
\begin_inset CommandInset label
LatexCommand label
name "fig:Light-sensing-bot"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The procedure followed by the robot in this experiment differs from the
 previous two experiments in that the robot does not directly manipulate
 the target object.
 Instead, the robot uses a flashlight attached to its gripper to illuminate
 the workspace and trigger the Lego bot's movement behaviour.
 To learn the object model, the robot performs the following steps:
\end_layout

\begin_layout Enumerate
localise the Lego bot in the scene,
\end_layout

\begin_layout Enumerate
calculate the information gain of each action given the current model likelihood
 distribution,
\end_layout

\begin_layout Enumerate
carry out the most informative action by illuminating the appropriate part
 of the workspace with the flashlight,
\end_layout

\begin_layout Enumerate
determine the resulting pose of the Lego bot,
\end_layout

\begin_layout Enumerate
classify the resulting pose by matching it to a result label,
\end_layout

\begin_layout Enumerate
update the model likelihood distribution using the outcome probabilities
 of the performed action and the result label.
\end_layout

\begin_layout Standard
The cart is localised in a scene using SIFT features and a textured marker
 placed on top of the Lego bot.
\end_layout

\begin_layout Standard
Next we present the possible models that can describe the movement behaviour
 of the Lego bot and the actions that the robot can perform (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Object-Models-and2"

\end_inset

), the simulation method used to determine the action probability models
 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Simulation-Method2"

\end_inset

), the method of labelling the result of each action with a discrete label
 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Result-Classification2"

\end_inset

), and the performance results of determining the behaviour model of the
 Lego cart using the active object model learning approach (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Performance-Results2"

\end_inset

).
\end_layout

\begin_layout Subsubsection
Possible Object Models and Actions
\begin_inset CommandInset label
LatexCommand label
name "sub:Object-Models-and2"

\end_inset


\end_layout

\begin_layout Standard
The robot's task is to determine the underlying behaviour of the Lego bot.
 This is done by finding a model from a predefined set of possible behaviour
 models that best fits the observed results of performed actions.
 For this experiment, we define the set of potential models that can describe
 the Lego bot's behaviour to be of size 16.
 If the left sensor is stimulated, the bot may turn 
\begin_inset Formula $0\textdegree$
\end_inset

 or 
\begin_inset Formula $45\textdegree$
\end_inset

 left, followed by moving forward 
\begin_inset Formula $0cm$
\end_inset

 or 
\begin_inset Formula $15cm$
\end_inset

.
 If the right sensor is stimulated, the bot may turn 
\begin_inset Formula $0\textdegree$
\end_inset

 or 
\begin_inset Formula $45\textdegree$
\end_inset

 right, followed by moving forward 
\begin_inset Formula $0cm$
\end_inset

 or 
\begin_inset Formula $15cm$
\end_inset

.
 A sensor is said to be stimulated when its sensed light level exceeds the
 sensed light level of the opposing sensor by 
\begin_inset Formula $50\%$
\end_inset

.
\end_layout

\begin_layout Standard
The robot determines which of the potential models most accurately matches
 the behaviour of the Lego bot by performing actions from an available pool
 and observing the results.
 The robot gripper has a flashlight attached that emits a focused light
 cone measured to have a 
\begin_inset Formula $15.3\textdegree$
\end_inset

 spread.
 The robot moves the gripper into a particular position to shine the light
 onto the Lego bot.
 Each illumination action can be defined by three parameters, the 
\begin_inset Formula $(x,y)$
\end_inset

 position of the light cone relative to the Lego bot, and the height of
 the light above the table surface.
 The height determines the size of the projected light circle on the table
 surface.
\end_layout

\begin_layout Standard
For our experiments, we restrict the centre of the light cone to fall inside
 a circle of radius 
\begin_inset Formula $15cm$
\end_inset

 from the centre of the Lego bot.
 This is chosen as it is the farthest distance at which our robot's light
 sensors can detect the light cone.
 The height of the flashlight is restricted to be between 
\begin_inset Formula $20cm$
\end_inset

 and 
\begin_inset Formula $40cm$
\end_inset

 from the table surface.
 These limits are chosen based on the minimum height to avoid hitting the
 Lego bot, and the maximum height that the robot arm can reach inside the
 workspace.
 We divide the heights into five values, 
\begin_inset Formula $\left\{ 20cm,25cm,30cm,35cm,40cm\right\} $
\end_inset

.
 For each of these heights, the robot generates 
\begin_inset Formula $50$
\end_inset

 random 
\begin_inset Formula $(x,y)$
\end_inset

 positions within the circle around the Lego bot.
 We consider this number of actions to give a good sample of the overall
 action space.
 This results in a pool of 
\begin_inset Formula $250$
\end_inset

 possible actions available to the robot to perform to discover the behaviour
 configuration of the Lego bot.
\end_layout

\begin_layout Subsubsection
Simulation Method
\begin_inset CommandInset label
LatexCommand label
name "sub:Simulation-Method2"

\end_inset


\end_layout

\begin_layout Standard
To determine the probability distribution over results of each action on
 the potential models we use a simulation method.
 However, unlike with the 
\emph on
Centre of Mass
\emph default
 and 
\emph on
Wheel Configuration
\emph default
 experiments, there are no convenient physics engine primitives for simulating
 a Lego Mindstorms robot programmed with a certain behaviour.
 Instead we approximate the amount of light sensed by a light sensor when
 the flashlight is placed in a particular position relative to the Lego
 bot.
 This is followed by simulating the movement performed by the Lego bot if
 the light response behaviour is triggered.
\end_layout

\begin_layout Standard
We simulate the flashlight by computing the circle of light it projects
 onto the table surface from a particular position.
 The flashlight is held vertical in all cases, and the beam spread is set
 to 
\begin_inset Formula $15.3\textdegree$
\end_inset

.
 This is used to compute the light circle's position and size for any given
 illumination action, which is specified by the relative position and height
 of the flashlight to the Lego bot.
 We then compute how much of this projected light circle falls within the
 field of view of the light sensor.
 We do this by projecting a large number of rays from the position of each
 light sensor.
 These rays are projected in a cone of angle 
\begin_inset Formula $45\textdegree$
\end_inset

 with the axis oriented in the direction of the light sensor (at a 
\begin_inset Formula $45\textdegree$
\end_inset

 angle looking at the ground).
 Each of these sample rays are intersected with the ground plane.
 The percentage of all of the sampling rays of a light sensor that have
 their ground intersection point fall within the projected light circle
 is said to be the light value sensed by the sensor.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:lego-sim"

\end_inset

 illustrates the ray casting method.
 We do this for both the left and right light sensors, and compare the computed
 values.
 If the computed value of one of the sensors is more than 
\begin_inset Formula $1.5\times$
\end_inset

 that of the other, the model movement behaviour is triggered.
 To simulate a movement behaviour, we rotate and translate the simulated
 Lego bot object as dictated by the particular behaviour model.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/lego_light_compute.png
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Simulating the robot's light sensor.
\end_layout

\end_inset

This diagram shows how we simulate the amount of light sensed by a light
 sensor when the flashlight casts a light circle on the ground.
 We project multiple rays (denoted by blue lines inside the sampling cone)
 from the light sensor's position, in a sampling cone of angle 
\begin_inset Formula $45\textdegree$
\end_inset

 in the direction the sensor is pointing.
 The percentage of these light rays that intersect the projected light circle
 is taken as the light sensed by the sensor.
 This value can then be compared to the light sensed by the opposing sensor
 to determine if the Lego bot's movement behaviour is triggered.
\begin_inset CommandInset label
LatexCommand label
name "fig:lego-sim"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To account for various sources of error and noise when the illumination
 action is performed on the robot, we apply a noise model to each simulated
 run.
 This is done by perturbing the light circle's size and position, as well
 as the amount the simulated Lego-bot turns and drives forward, using Gaussian
 noise.
 The light circle position is shifted in a random direction on the 
\begin_inset Formula $xy$
\end_inset

 plane by noise with standard deviation 
\begin_inset Formula $0.5cm$
\end_inset

 and mean 
\begin_inset Formula $0cm$
\end_inset

.
 The light circle size perturbation has a standard deviation of 
\begin_inset Formula $0.5cm$
\end_inset

 and mean 
\begin_inset Formula $0cm$
\end_inset

.
 When the simulated Lego-bot turns, the turn amount perturbation has a standard
 deviation of 
\begin_inset Formula $10\textdegree$
\end_inset

 and mean 
\begin_inset Formula $0cm$
\end_inset

, when it drives forward the perturbation for the distance driven has a
 standard deviation of 
\begin_inset Formula $1cm$
\end_inset

 and mean 
\begin_inset Formula $0cm$
\end_inset

.
 These perturbations are chosen 
\emph on
ad hoc
\emph default
, but are set to overestimate the error in the Lego bot's movement.
\end_layout

\begin_layout Subsubsection
Result Classification
\begin_inset CommandInset label
LatexCommand label
name "sub:Result-Classification2"

\end_inset


\end_layout

\begin_layout Standard
The result labels are generated by discretising the workspace into uniform
 cells, followed by matching the Lego-bot's resulting pose at the conclusion
 of an action iteration to one of these cells.
 The discretisation is achieved by dividing a square 
\begin_inset Formula $50cm\times50cm$
\end_inset

 centered on the Lego-bot into 
\begin_inset Formula $100$
\end_inset

 
\begin_inset Formula $5cm\times5cm$
\end_inset

 cells.
 To discretise the orientation, each of these is further divided into 
\begin_inset Formula $24$
\end_inset

 orientation cells, dividing the 
\begin_inset Formula $360\textdegree$
\end_inset

 circle into 
\begin_inset Formula $15\textdegree$
\end_inset

 increments.
 The end result is 
\begin_inset Formula $2400$
\end_inset

 possible result labels.
 
\end_layout

\begin_layout Standard
When an illumination action is performed, to determine the outcome result
 label, we first calculate the relative motion of the Lego-bot to its starting
 pose.
 From this relative pose we then calculate the 
\begin_inset Formula $(x,y,\theta)$
\end_inset

 values, which are the relative amount the robot moved on the 
\begin_inset Formula $(x,y)$
\end_inset

 plane and the angle amount it has rotated around the vertical axis.
 This relative pose is then matched to one of the 
\begin_inset Formula $2400$
\end_inset

 possible result label cells.
\end_layout

\begin_layout Subsubsection
Performance Results
\begin_inset CommandInset label
LatexCommand label
name "sub:Performance-Results2"

\end_inset


\end_layout

\begin_layout Standard
We test the performance of the learning system by having the robot carry
 out multiple runs of learning the behaviour model of the Lego bot.
 In each run, the robot performs a series of actions, updating the confidence
 distribution over the possible models using the result of each action.
\end_layout

\begin_layout Standard
To test our approach, we used three different scenarios (the Lego bot was
 programmed with three different behaviours).
 For each scenario the robot performed three independent learning runs,
 each run involved a series of six illumination actions to determine the
 underlying model of the Lego bot's behaviour.
 In the first scenario, the Lego bot is programmed to not move at all, that
 is, to not respond to stimuli.
 In the second scenario, the Lego bot is programmed to turn left when the
 left sensor is stimulated, otherwise to remain stationary.
 In the third scenario, the Lego bot is programmed to turn left and move
 forward when the left sensor is stimulated, and move forward without rotating
 when the right sensor is stimulated.
 The results are presented in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Lego-experiment-results."

\end_inset

 and show how the robot's confidence distribution over the 16 possible behaviour
 models changed during the course of each run.
 We can see that the robot's confidence distribution quickly tends toward
 the correct model describing the Lego bot's behaviour in all 3 instances.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/lego.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Stimulus response experiment results.
\end_layout

\end_inset

The results of the 
\emph on
Stimulus Response Experiment
\emph default
 showing the progression of the model confidence distribution after a number
 of illumination action iterations.
 There are 16 possible models that can describe the Lego bot behaviour,
 the above results show how the robot's confidence distribution over the
 potential models evolved when performing actions in three different scenarios.
 Top Left corresponds to a scenario in which the Lego bot does not respond
 in any way to light.
 Top Right corresponds to the scenario in which the Lego bot is programmed
 to turn left when the left sensor is stimulated.
 The Bottom Left corresponds to the scenario in which the Lego bot is programmed
 to turn left and move forward when the left sensor is stimulated, and move
 forward when the right sensor is stimulated.
 The error bars correspond to the 
\begin_inset Formula $95\%$
\end_inset

 confidence interval.
 We omit individually labelling each line in the graphs as there are 16
 different models.
 We only provide a label for the correct model confidence in each instance.
\begin_inset CommandInset label
LatexCommand label
name "fig:Lego-experiment-results."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In addition to evaluating the performance of the learning method, we investigate
d the effect of choosing the action with highest expected information gain
 on the learning rate.
 We compare, in simulation, a robot learning the Lego bot's behaviour using
 the most informative action at every step, and using a random action at
 every step.
 The actions are simulated in the same manner as when building the action
 model.
 For the best and random action selection policies, three simulated runs
 are performed, each with six actions performed.
 The progression of the confidence distribution over the possible Lego bot
 behaviour models is show in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:lego-sim-comp"

\end_inset

.
 It can be seen that by choosing the most informative action leads to a
 convergence of the confidence distribution to the correct object model,
 whereas choosing a random action does not result in a convergence to the
 correct model.
 This is due to the fact that many of the possible actions do not result
 in any response by the Lego bot.
 If neither of the light sensors are illuminated by the flashlight, then
 the Lego bot's behaviour will not be triggered and no information will
 be gained as a result.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/lego_sim.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Stimulus response experiment information gain comparison.
\end_layout

\end_inset

Learning the Lego bot's behaviour using the action with highest expected
 information gain (left), and using a random action (right) at every iteration.
 This is performed in simulation with the simulated Lego bot programmed
 to drive forward if its left sensor is stimulated, and turn left and drive
 forward if its right sensor is stimulated.
 By performing the most informative action the confidence distribution quickly
 converges on the correct object model.
 When performing a random action, the confidence distribution on average
 does not converge.
 The error bars indicate the 
\begin_inset Formula $95\%$
\end_inset

 confidence interval.
\begin_inset CommandInset label
LatexCommand label
name "fig:lego-sim-comp"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Learned Model Exploitation
\begin_inset CommandInset label
LatexCommand label
name "sec:Learned-Model-Exploitation"

\end_inset


\end_layout

\begin_layout Subsubsection*
Overview
\end_layout

\begin_layout Standard
The final experiment involves the robot performing a basic tool use task
 using an object for which it has previously learned a physics model.
 This learned model allows the robot to plan a solution to a task using
 the predictive qualities of the model, and then carry out the plan to complete
 the task.
\end_layout

\begin_layout Standard
The objective for the robot is to knock over a cylinder standing vertically
 on a flat surface.
 This cylinder is out of reach of the robot arm, instead the robot must
 use a ramp and a box-cart to knock down the cylinder by placing and releasing
 the cart on the ramp in the appropriate orientation such that its trajectory
 intersects the position of the cylinder.
 The workspace consists of a flat table top and a 
\begin_inset Formula $20\textdegree$
\end_inset

 ramp.
 The cylinder is placed upright on the flat table top in one of two positions,
 15cm and 20cm from the end of the ramp.
 This configuration is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-workspace-layout"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/knock_experiment.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Tool use task experiment workspace layout.
\end_layout

\end_inset

The above figure represents the workspace layout for the 
\emph on
Tool Use
\emph default
 task.
 In this task the robot has a workspace similar to the 
\emph on
Wheels Experiment
\emph default
, but with the addition of a cylindrical peg placed at one of two possible
 positions
\emph on
, A
\emph default
 and 
\emph on
B
\emph default
 (
\begin_inset Formula $15cm$
\end_inset

 and 
\begin_inset Formula $20cm$
\end_inset

 from the ramp), the ramp angle is set to 
\begin_inset Formula $20\textdegree$
\end_inset

.
 The robot's task is to use the internal simulated model of the box-cart
 object to release the cart from an appropriate position and orientation
 on the ramp to knock over the peg.
\begin_inset CommandInset label
LatexCommand label
name "fig:The-workspace-layout"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We use two different box-cart configurations, the wheels can either be directed
 forward, or at a 
\begin_inset Formula $45\textdegree$
\end_inset

 angle to the left, both wheels are free to rotate on the axle.
 These two cart configurations are illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Possible-box-cart-wheel"

\end_inset

.
 The robot has a learned physics engine model of the box-cart, which is
 determined using the method from Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Wheels-Experiment"

\end_inset

 (note that the ramp angle during learning is 
\begin_inset Formula $25\textdegree$
\end_inset

, whereas during this task it is 
\begin_inset Formula $20\textdegree$
\end_inset

).
 The robot uses this model to simulate the outcome of releasing the box-cart
 from many different poses on the ramp.
 It chooses the best release pose, and performs the corresponding action
 on the real world box-cart to knock down the cylinder.
 The purpose of this experiment is to demonstrate the feasibility of using
 a predictive object model in the form of a physics engine to plan a solution
 to a task, demonstrating the importance of learning the correct object
 model.
 We also test the ability to use a learned physics model to make predictions
 in an environment different to that during learning.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/wheels_knock_models.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Configurations of the box-cart wheels for the tool use task.
\end_layout

\end_inset

Possible box-cart wheel configurations models.
 The wheels of the box-cart can either be oriented straight ahead, or at
 a 
\begin_inset Formula $45\textdegree$
\end_inset

 angle to the left.
 Box wheels are free to rotate.
\begin_inset CommandInset label
LatexCommand label
name "fig:Possible-box-cart-wheel"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To find the release pose for the box-cart with the best chance of knocking
 over the cylinder, the robot performs a non-linear numerical optimisation
 over the release pose parameter space.
 The release pose parameters specify the 
\begin_inset Formula $(x,y)$
\end_inset

 position of the box-cart on the ramp and its orientation angle 
\begin_inset Formula $\theta$
\end_inset

.
 We use the Nelder-Mead 
\begin_inset CommandInset citation
LatexCommand cite
key "6_neldermead"

\end_inset

 optimisation method, as it is simple to implement and this particular problem
 has a low dimension and smooth parameter space.
 In principle, other optimisation methods, such as Simulated Annealing 
\begin_inset CommandInset citation
LatexCommand cite
key "6_simulated_annealing"

\end_inset

, may be used instead.
 The value of the release pose objective function to be optimised is determined
 by performing a number of simulations where the simulated box-cart model
 is released in the specified pose.
 The simulation is run for 600 frames (this is sufficient for the simulated
 cart to come to a stop under all circumstances) at a step rate of 30 frames
 per second.
 For each simulated frame the position of the box-cart is recorded.
 The output of a single simulation run is the smallest distance between
 the box-cart and the position of the cylinder during the run.
 This is performed 50 times to account for the noise in the simulated action.
 The noise model is the same as the one used for the 
\emph on
Wheels Experiment
\emph default
 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Wheels-Experiment"

\end_inset

).
 The final output of the objective function is the average smallest distance
 between the box-cart and the cylinder.
 This objective function is summarised in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Box-cart-positioning-objective"

\end_inset

.
 Using the Nelder-Mead algorithm, we find the box-cart release pose that
 minimises this objective function.
 Finally, the robot picks up the box-cart and releases it from the optimal
 pose to knock down the cylinder.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\series bold
input:
\series default
 box cart release pose
\begin_inset Formula $\rightarrow pose$
\end_inset

 
\end_layout

\begin_layout Plain Layout

\series bold
input:
\series default
 box cart physics model 
\begin_inset Formula $\rightarrow model$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
input:
\series default
 cylinder position 
\begin_inset Formula $\rightarrow target\_position$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $error\_sum\leftarrow0$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
for
\series default
 
\begin_inset Formula $iter$
\end_inset

 
\series bold
in
\series default
 
\begin_inset Formula $\left\{ 1\ldots50\right\} $
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $initialiseSimulationEnvironment()$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $noisy\_object\_model\leftarrow perturbModel(model)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $noisy\_release\_pose\leftarrow perturbPose(pose)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $positionBoxCart(noisy\_release\_pose,noisy\_object\_model)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $min\_distance\leftarrow\inf$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
for
\series default
 
\begin_inset Formula $frame$
\end_inset

 
\series bold
in
\series default
 
\begin_inset Formula $\left\{ 1\ldots600\right\} $
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $simulationStep()$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $cart\_position\leftarrow getBoxCartPosition()$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
if
\series default
 
\begin_inset Formula $\left\Vert cart\_position-target\_position\right\Vert <min\_distance$
\end_inset

 
\series bold
then
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $min\_distance\leftarrow\left\Vert cart\_position-target\_position\right\Vert $
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
endif
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
endfor
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $error\_sum\leftarrow error\_sum+min\_distance$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
endfor
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $average\_error\leftarrow\frac{error\_sum}{50}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
output:
\series default
 value of the object function 
\begin_inset Formula $\leftarrow average\_error$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Box-cart positioning objective function.
\begin_inset CommandInset label
LatexCommand label
name "alg:Box-cart-positioning-objective"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Results
\end_layout

\begin_layout Standard
To test the above approach, as well as to determine the importance of learning
 the correct object model, the robot used the described method to release
 the box-cart from the appropriate position and orientation on the ramp
 to knock down the cylinder.
 We performed this experiments under the following conditions: with the
 cylinder placed 15cm and 20cm (position A and B respectively in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-workspace-layout"

\end_inset

) from the end of the ramp, with the box-cart wheels pointing straight ahead
 and turned 
\begin_inset Formula $45\textdegree$
\end_inset

 to the left, and with the correct and incorrect object model.
 
\begin_inset Quotes eld
\end_inset

Correct object
\begin_inset Quotes erd
\end_inset

 model refers to the physics model of the box cart matching the actual configura
tion of the box cart.
 
\begin_inset Quotes eld
\end_inset

Incorrect object
\begin_inset Quotes erd
\end_inset

 model refers to the physics model being the opposite of the actual configuratio
n of the box cart.
 That is, the robot thinks the box cart wheels are turned while in reality
 they are straight and vice versa.
 This is done to demonstrate the importance of the robot having an accurate
 internal model of an object to successfully complete the task.
 In total, this results in eight different test scenarios.
 
\end_layout

\begin_layout Standard
For each test scenario the task is performed eight times.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Success-rate-of"

\end_inset

 shows the success rate of knocking down the cylinder for the different
 scenarios.
 Additionally, for each iteration we recorded the predicted distance of
 the box-cart from the target peg, calculated using the simulated object
 model.
 We also recorded the distance between the box-cart and the cylinder after
 it has rolled down the ramp and come to a stop.
 A distance of 0 was recorded if the cylinder was knocked down by the box-cart.
 This data demonstrates the importance of an accurate model to describe
 the object to plan and complete the task.
 These results are summarised in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Knock-tool-use"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Correct Model
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Incorrect Model
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Position A - Straight Wheels
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8/8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0/8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Position A - Turned Wheels
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8/8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0/8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Position B - Straight Wheels
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4/8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0/8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Position B - Turned Wheels
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5/8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0/8
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Success rate of knocking down the cylinder with the box-cart.
 The above table shows the importance of learning the correct object model.
 The lower success rate when the cylinder is in position B is due to a longer
 distance from the ramp, increasing the chance of the box-cart running off
 course.
\begin_inset CommandInset label
LatexCommand label
name "tab:Success-rate-of"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/knock.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Argument
status open

\begin_layout Plain Layout
Tool use task experiment results.
\end_layout

\end_inset

Predicted and actual results of using a box-cart to knock down an out of
 reach cylinder, expressed as a distance between the box-cart and the target
 cylinder.
 The result distance is the smallest distance between the cylinder and the
 box-cart after it comes to rest.
 The errors bars represent the standard deviation across eight repeated
 iterations of each scenario.
\begin_inset CommandInset label
LatexCommand label
name "fig:Knock-tool-use"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
These results clearly demonstrate the importance of learning the correct
 object physics model, which allows accurate prediction of action outcomes
 and task planning.
 When the robot had an incorrect model of the object it was unable to accurately
 predict the action outcomes and successfully complete the task even once.
 It should be noted that when the cylinder is in position B, the lower success
 rate is due to the longer distance between the cylinder and the end of
 the ramp.
 The further the distance the larger the drift of the box-cart trajectory
 resulting from positioning errors and small variations in the table and
 ramp surface.
\end_layout

\begin_layout Section
Discussion
\begin_inset CommandInset label
LatexCommand label
name "sec:Discussion-1"

\end_inset


\end_layout

\begin_layout Standard
We have presented a general method for a robot to determine hidden properties
 of an object by building a predictive model of the object using experimentation
 and simulation.
 A simulator is used to calculate the outcome probabilities of the actions
 that the robot can perform on an object, as well as to determine which
 is the most informative.
 The expected KL divergence is used to determine the information gain of
 an action.
 By choosing the most informative action, the robot can learn the model
 of the object in a minimum number of experiments.
\end_layout

\begin_layout Standard
We have presented both a generalised algorithm as well as several concrete
 applications of the method.
 We have demonstrated the robot determining the centre of mass of an object,
 as well as learning the wheel configuration of a box-cart.
 We have demonstrated the generality of our method by using it to model
 the behaviour of another robot responding to outside stimuli.
 Finally, a learned object model is applied to a simple tool use task in
 which the robot uses the object to plan and accomplish a goal.
\end_layout

\begin_layout Standard
It must be noted that some of the results of the concrete system implementations
 showed a higher than expected variance in terms of the robot's confidence
 distribution over the potential object models.
 This is likely due to the simplified noise model used during action simulation,
 as compared to the real world noise model.
 When building the action probability models we typically used a simple
 linear Gaussian noise model.
 However, in the real world the noise is, in many instances, highly non-linear
 and non-Gaussian.
 For example, one of the most common error modes during the 
\emph on
Centre of Mass Experiment
\emph default
 was for the robot to place the object too low, resulting in the bottom
 of the object striking the table surface.
 This would, in turn, shift the object in the gripper, changing its orientation
 significantly.
 This type of noise is not accounted for during simulation and would require
 a more detailed simulation, including simulating the robot arm and its
 grasp of the object.
 We leave this for future work.
\end_layout

\begin_layout Section
Future Work
\begin_inset CommandInset label
LatexCommand label
name "sec:Future-Work-1"

\end_inset


\end_layout

\begin_layout Standard
The work presented in this chapter sets out a general method for determining
 an object's properties, which can then be used for further task planning
 and prediction.
 However, there are several areas for improvement that can be addressed
 in future work.
\end_layout

\begin_layout Standard
First, the method we have presented is limited to classifying an object
 into one of several pre-determined models.
 These models are discrete, finite and fixed.
 However, many of the properties that define the nature of an object are
 inherently continuous values.
 For example, the coefficient of friction of a surface, or the location
 of the centre of gravity.
 We may discretise the values as an approximation, but this may result in
 a very large number of potential models, which would in turn result in
 a large computational load to simulate all of the actions on all of the
 models.
 Instead, it may be possible to adapt the presented method to perform an
 optimisation search through the continuous parameter space to determine
 the most accurate object model.
\end_layout

\begin_layout Standard
Likewise, the set of possible actions that the robot can perform is predefined
 and fixed.
 A possible improvement is to allow the robot to dynamically add new actions
 to choose from.
 It may be able to use information about the quality of existing actions
 to generate new instances of increased quality, while rejecting ones with
 a low expected information gain.
 This may be increasingly important for action models with a large parameter
 space.
 The models used in our experiments were of low dimensionality, described
 by only two or three parameters.
 However, for more complicated models with many parameters, providing sufficient
 coverage of the parameter space may not be feasible with a fixed predetermined
 set of actions.
\end_layout

\begin_layout Standard
Third, the result space of each action is restricted to being finite and
 discrete in the form of a fixed number of result labels.
 This is essentially a method of function approximation of the underlying
 probability distribution over the resulting world state after an action
 is performed.
 The discrete and finite nature of the function approximation simplifies
 the update of the confidence over the potential models distribution, as
 well as simplifying the calculation of the expected information gain.
 However, discretisation leads to a potential loss of information.
 A future improvement is to move to some form of sampling method for representin
g the probability distribution over the result world states.
 
\end_layout

\begin_layout Standard
Finally, we have only demonstrated a very simple planning and tool use task
 using the learned object model.
 In this task the action performed by the robot was predetermined ahead
 of time, the only planning involved was to determine the parameters for
 the action (where to release the box-cart).
 This is sufficient to demonstrate the predictive qualities of the learned
 model, but for more complex tasks and actions a more comprehensive planner
 (eg: STRIPS 
\begin_inset CommandInset citation
LatexCommand cite
key "strips_planner"

\end_inset

) should be used.
 Additionally, a potential future direction is to use the learned quantitative
 model of the object to learn a higher level qualitative model, this would
 improve model generalisation and planning of complex actions 
\begin_inset CommandInset citation
LatexCommand cite
key "6_qualitative_models"

\end_inset

.
\end_layout

\end_body
\end_document
