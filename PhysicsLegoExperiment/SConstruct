import sys
import os

### Stuff you might want to change ###

LIBRARY_SOURCES = [
    'src/CameraController.cpp',
    'src/ObjectSceneMatch.cpp',
    'src/ObjectPoseFilter.cpp',
    'src/SceneBestFit.cpp',
    'src/Settings.cpp',
    'src/Control.cpp',
    'src/MainController.cpp',
    'src/Console.cpp',
    'src/SuperQuadric.cpp',

    'src/Physics/ConvexHullPhysicsObject.cpp',
    'src/Physics/PhysicsObject.cpp',
    'src/Physics/PhysicsWorld.cpp',

    'src/Camera/Camera.cpp',
    'src/Camera/RemoteCamera.cpp',
    'src/Camera/PlaybackCamera.cpp',
    'src/Camera/Recorder.cpp',

    'src/Arm/Arm.cpp',
    'src/Arm/RemoteArm.cpp',
    'src/Arm/ArmForwardKinematics.cpp',
    'src/Arm/ArmInverseKinematics.cpp',
    'src/Arm/IKFitnessFunctionNearest.cpp',
    'src/Arm/IKFitnessFunctionObjectPickup.cpp',
    'src/Arm/IKFitnessFunctionExperimentPickup.cpp',
    'src/Arm/IKFitnessFunctionExperimentDrop.cpp',

    'src/Features/StereoFeatureCorrelation.cpp',
    'src/Features/SIFTGenerator.cpp',
    'src/Features/FeatureMemory/ObjectSnapshotDB.cpp',
    'src/Features/FeatureMemory/ObjectSnapshot.cpp',
    'src/Features/SIFT/imgfeatures.cpp',
    'src/Features/SIFT/utils.cpp',
    'src/Features/SIFT/sift.cpp',

    'src/Util/Common.cpp',
    'src/Util/Geometry.cpp',
    'src/Util/Timer.cpp',
    'src/Util/Semaphore.cpp',
    'src/Util/ReadWriteLock.cpp',
    'src/Util/ParallelServer.cpp',
    'src/Util/ConvexHull.cpp',
    'src/Util/PerfStats.cpp',
    'src/Util/Quaternion.cpp',

    'src/OptimiserClass/NelderMead.cpp',
    'src/OptimiserClass/RRNelderMead.cpp',
    'src/OptimiserClass/ParticleSwarm.cpp',
    'src/OptimiserClass/GeneticAlgorithm.cpp',

    'src/Visualisation/GraphicsBase.cpp',
    'src/Visualisation/SceneRenderer.cpp',
    'src/Visualisation/TextureManager.cpp',
    'src/Visualisation/PointCloudRenderObject.cpp',
    'src/Visualisation/CylinderRenderObject.cpp',
    'src/Visualisation/SuperQuadricRenderObject.cpp',
    'src/Visualisation/BoxRenderObject.cpp',
    'src/Visualisation/MeshRenderObject.cpp',
    'src/Visualisation/ArmRenderObject.cpp',

    'src/Experiment/DropExperiment.cpp',
    'src/Experiment/ExperimentCoordinator.cpp',
    'src/Experiment/ExperimentResult.cpp',
    'src/Experiment/ExperimentOptimiser.cpp',

    'src/Object/Object.cpp',
    'src/Object/ObjectPhysModel.cpp',
    'src/Object/ObjectGrip.cpp',
    'src/Object/ObjectExperimentTransfer.cpp',
]

BINARY_SOURCES = ['src/main.cpp']

DIST_SOURCES = LIBRARY_SOURCES + [
    'src/CameraController.h',
    'src/ObjectSceneMatch.h',
    'src/ObjectPoseFilter.h',
    'src/SceneBestFit.h',
    'src/MainController.h',
    'src/Console.h',
    'src/SuperQuadric.h',
    'src/Mesh.h',
    'src/Settings.h',
    'src/Control.h',

    'src/Physics/ConvexHullPhysicsObject.h',
    'src/Physics/PhysicsObject.h',
    'src/Physics/PhysicsWorld.h',

    'src/Camera/Camera.h',
    'src/Camera/RemoteCamera.h',
    'src/Camera/PlaybackCamera.h',
    'src/Camera/Recorder.h',

    'src/Arm/Arm.h',
    'src/Arm/RemoteArm.h',
    'src/Arm/DummyArm.h',
    'src/Arm/ArmProtocol.h',
    'src/Arm/ArmForwardKinematics.h',
    'src/Arm/ArmInverseKinematics.h',
    'src/Arm/ArmJointLimits.h',
    'src/Arm/IKCommon.h',
    'src/Arm/IKFitnessFunctionNearest.h',
    'src/Arm/IKFitnessFunctionObjectPickup.h',
    'src/Arm/IKFitnessFunctionExperimentPickup.h',
    'src/Arm/IKFitnessFunctionExperimentDrop.h',
   
    'src/Features/StereoFeature.h',
    'src/Features/StereoFeatureCorrelation.h',
    'src/Features/SIFTGenerator.h',
    'src/Features/FeatureMemory/ObjectSnapshotDB.h',
    'src/Features/FeatureMemory/ObjectSnapshot.h',
    'src/Features/SIFT/imgfeatures.h',
    'src/Features/SIFT/utils.h',
    'src/Features/SIFT/sift.h',

    'src/Util/Common.h',
    'src/Util/Geometry.h',
    'src/Util/Timer.h',
    'src/Util/Semaphore.h',
    'src/Util/ReadWriteLock.h',
    'src/Util/ParallelServer.h',
    'src/Util/Vector3D.h',
    'src/Util/Vector2D.h',
    'src/Util/Matrix.h',
    'src/Util/Transform.h',
    'src/Util/ConvexHull.h',
    'sec/Util/PerfStats.h',
    'src/Util/Octree.h',
    'src/Util/Octree.hpp',
    'src/Util/Quaternion.h', 
    
    'src/OptimiserClass/Common.h',
    'src/OptimiserClass/Optimiser.h',
    'src/OptimiserClass/NelderMead.h',
    'src/OptimiserClass/RRNelderMead.h'
    'src/OptimiserClass/ParticleSwarm.h',
    'src/OptimiserClass/GeneticAlgorithm.h',

    'src/Visualisation/GraphicsBase.h',
    'src/Visualisation/SceneRenderer.h',
    'src/Visualisation/TextureManager.h',
    'src/Visualisation/RenderObject.h',
    'src/Visualisation/PointCloudRenderObject.h',
    'src/Visualisation/CylinderRenderObject.h',
    'src/Visualisation/SuperQuadricRenderObject.h',
    'src/Visualisation/BoxRenderObject.h',
    'src/Visualisation/MeshRenderObject.h',
    'src/Visualisation/ArmRenderObject.h',

    'src/Experiment/DropExperiment.h',
    'src/Experiment/ExperimentCoordinator.h',
    'src/Experiment/ExperimentResult.h',
    'src/Experiment/Experiment.h',
    'src/Experiment/ExperimentOptimiser.h',

    'src/Object/Object.h',
    'src/Object/ObjectPhysModel.h',
    'src/Object/ObjectGrip.h',
    'src/Object/ObjectExperimentTransfer.h',
]

LIBS = ['cv', 'highgui', 'boost_thread-mt', 'pthread', 'GL', 'GLU', 'SDL', 'BulletCollision', 'BulletDynamics', 'LinearMath']

release_flags = '-Wall -D_REENTRANT -g -O3 -msse -msse2 -I/home/osushkov/bullet-2.76/src'
debug_flags = '-Wall -D_REENTRANT -g -p -DDEBUG -I/home/osushkov/bullet-2.76/src'

### Stuff you probably don't need to change ###

lib_flags = '-L/home/osushkov/bullet-2.76/src/BulletCollision'
lib_flags = lib_flags + ' -L/home/osushkov/bullet-2.76/src/BulletDynamics'
lib_flags = lib_flags + ' -L/home/osushkov/bullet-2.76/src/LinearMath'
env = Environment(parse_flags = lib_flags)

mode = ARGUMENTS.get('mode', 'debug')
if mode == 'debug':
    env.Append(CXXFLAGS = debug_flags)
elif mode == 'release':
    env.Append(CXXFLAGS = release_flags)
else:
    print "Unknown mode '%s%', use debug (default) or release" % mode
    sys.exit(1)


### compilation rules
library_objects = [ env.Object(s, CXX = 'g++') for s in LIBRARY_SOURCES]
binary_objects = [ env.Object(s, CXX = 'g++') for s in BINARY_SOURCES]

objectlearn = env.Program('physics', library_objects + binary_objects,
                        CXX = 'g++', LIBS = LIBS)

